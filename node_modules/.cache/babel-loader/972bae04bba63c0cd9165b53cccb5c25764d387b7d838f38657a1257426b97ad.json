{"ast":null,"code":"export const fetchAllStaticDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching All Data:', error);\n  }\n};\nexport const fetchStaticTypesDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/types');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching All Types:', error);\n  }\n};\nexport const fetchStaticAllExperiencesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/total');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Types Count:', error);\n  }\n};\nexport const fetchStaticEventTypesDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/eventTypes');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching All Event Types:', error);\n  }\n};\nexport const fetchSunBurstFromAPI = async fileName => {\n  const defaultFileName = 'data_config.json'; // Substitua pelo nome do seu arquivo padrão\n  const fileToFetch = fileName || defaultFileName;\n  try {\n    const response = await fetch(`http://127.0.0.1:5000/events/exps?file_name=${fileName}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to fetch sunburst data:', error);\n    throw error;\n  }\n};\nexport const fetchBoxPlotFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/expDurations');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Box Plot:', error);\n  }\n};\nexport const fetchStaticCountWordsFromAPI = async expIndex => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/words');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching words:', error);\n    throw error;\n  }\n};\nexport const fetchStaticSankeyFromAPI = async expIndex => {\n  try {\n    const url = expIndex !== undefined ? `http://127.0.0.1:5000/events/sankey?exp=${expIndex}` : 'http://127.0.0.1:5000/events/sankey';\n    const response = await fetch(url);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching sankey Data:', error);\n    throw error;\n  }\n};\nexport const fetchCountForAllTypesFromAPI = async () => {\n  try {\n    const types = await fetchStaticTypesDataFromAPI();\n    const countByType = [];\n    await Promise.all(types.map(async type => {\n      const response = await fetch(`http://127.0.0.1:5000/events/count?type=${type}`);\n      const countData = await response.json();\n      const count = countData[type];\n      countByType.push({\n        type,\n        count\n      });\n    }));\n    return countByType;\n  } catch (error) {\n    console.error('Error fetching Count for All Types:', error);\n    return null;\n  }\n};\nexport const fetchCountForAllEventTypesFromAPI = async () => {\n  try {\n    const eventTypes = await fetchStaticEventTypesDataFromAPI();\n    const countByEventType = [];\n    await Promise.all(eventTypes.map(async type => {\n      const response = await fetch(`http://127.0.0.1:5000/events/count?eventType=${type}`);\n      const countData = await response.json();\n      const count = countData[type];\n      countByEventType.push({\n        type,\n        count\n      });\n    }));\n    return countByEventType;\n  } catch (error) {\n    console.error('Error fetching Count for All Events Types:', error);\n    return null;\n  }\n};\nexport const fetchStaticCountExpsFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/expCount');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error);\n  }\n};\nexport const fetchStaticPiesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/pie-chart');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error);\n  }\n};\nexport const fetchStaticTimeLineFromAPI = async (experienceId = null) => {\n  try {\n    const url = experienceId ? `http://127.0.0.1:5000/events/times?exp_id=${experienceId}` : 'http://127.0.0.1:5000/events/times';\n    const response = await fetch(url);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error);\n  }\n};\nexport const fetchStaticAllTypesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/count/types');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Types Count:', error);\n  }\n};\nexport const fetchStaticAllFilesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/files');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching All files', error);\n  }\n};","map":{"version":3,"names":["fetchAllStaticDataFromAPI","response","fetch","json","error","console","fetchStaticTypesDataFromAPI","fetchStaticAllExperiencesFromAPI","fetchStaticEventTypesDataFromAPI","fetchSunBurstFromAPI","fileName","defaultFileName","fileToFetch","fetchBoxPlotFromAPI","fetchStaticCountWordsFromAPI","expIndex","fetchStaticSankeyFromAPI","url","undefined","fetchCountForAllTypesFromAPI","types","countByType","Promise","all","map","type","countData","count","push","fetchCountForAllEventTypesFromAPI","eventTypes","countByEventType","fetchStaticCountExpsFromAPI","fetchStaticPiesFromAPI","fetchStaticTimeLineFromAPI","experienceId","fetchStaticAllTypesFromAPI","fetchStaticAllFilesFromAPI"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction/src/api/StaticData.js"],"sourcesContent":["export const fetchAllStaticDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching All Data:', error)\n  }\n}\n\nexport const fetchStaticTypesDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/types')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching All Types:', error)\n  }\n}\n\nexport const fetchStaticAllExperiencesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/total')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Types Count:', error)\n  }\n}\n\nexport const fetchStaticEventTypesDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/eventTypes')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching All Event Types:', error)\n  }\n}\n\nexport const fetchSunBurstFromAPI = async (fileName) => {\n  const defaultFileName = 'data_config.json' // Substitua pelo nome do seu arquivo padrão\n  const fileToFetch = fileName || defaultFileName\n  try {\n    const response = await fetch(\n      `http://127.0.0.1:5000/events/exps?file_name=${fileName}`\n    )\n    return await response.json()\n  } catch (error) {\n    console.error('Failed to fetch sunburst data:', error)\n    throw error\n  }\n}\n\nexport const fetchBoxPlotFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/expDurations')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Box Plot:', error)\n  }\n}\n\nexport const fetchStaticCountWordsFromAPI = async (expIndex) => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/words')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching words:', error)\n    throw error\n  }\n}\n\nexport const fetchStaticSankeyFromAPI = async (expIndex) => {\n  try {\n    const url =\n      expIndex !== undefined\n        ? `http://127.0.0.1:5000/events/sankey?exp=${expIndex}`\n        : 'http://127.0.0.1:5000/events/sankey'\n\n    const response = await fetch(url)\n\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching sankey Data:', error)\n    throw error\n  }\n}\n\nexport const fetchCountForAllTypesFromAPI = async () => {\n  try {\n    const types = await fetchStaticTypesDataFromAPI()\n\n    const countByType = []\n\n    await Promise.all(\n      types.map(async (type) => {\n        const response = await fetch(\n          `http://127.0.0.1:5000/events/count?type=${type}`\n        )\n        const countData = await response.json()\n        const count = countData[type]\n\n        countByType.push({ type, count })\n      })\n    )\n\n    return countByType\n  } catch (error) {\n    console.error('Error fetching Count for All Types:', error)\n    return null\n  }\n}\n\nexport const fetchCountForAllEventTypesFromAPI = async () => {\n  try {\n    const eventTypes = await fetchStaticEventTypesDataFromAPI()\n\n    const countByEventType = []\n\n    await Promise.all(\n      eventTypes.map(async (type) => {\n        const response = await fetch(\n          `http://127.0.0.1:5000/events/count?eventType=${type}`\n        )\n        const countData = await response.json()\n        const count = countData[type]\n\n        countByEventType.push({ type, count })\n      })\n    )\n\n    return countByEventType\n  } catch (error) {\n    console.error('Error fetching Count for All Events Types:', error)\n    return null\n  }\n}\n\nexport const fetchStaticCountExpsFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/expCount')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error)\n  }\n}\n\nexport const fetchStaticPiesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/pie-chart')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error)\n  }\n}\n\nexport const fetchStaticTimeLineFromAPI = async (experienceId = null) => {\n  try {\n    const url = experienceId\n      ? `http://127.0.0.1:5000/events/times?exp_id=${experienceId}`\n      : 'http://127.0.0.1:5000/events/times'\n\n    const response = await fetch(url)\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error)\n  }\n}\n\nexport const fetchStaticAllTypesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/count/types')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Types Count:', error)\n  }\n}\n\nexport const fetchStaticAllFilesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/files')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching All files', error)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}