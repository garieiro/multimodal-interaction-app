{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/RealTimeData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport RealTimeBarChart from './charts/RealTimeBarChart';\nimport KafkaDataReceiver from '../../api/OnlineData';\nimport CountRealTimeEvents from './CountRealTimeEvents';\nimport EventDurationRealTime from './EventDurationRealTime';\nimport RealTimeScatterPlot from './charts/RealTimeScatterPlot';\nimport ConvertDataForScatterPlotRealTime from './ConvertDataForScatterPlotRealTime';\nimport LineChart from './charts/LineChart'; // Importe o novo componente\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeData = () => {\n  _s();\n  const [realTimeData, setRealTimeData] = useState([]);\n  const [eventDurations, setEventDurations] = useState([]);\n  const [eventTimeline, setEventTimeline] = useState([]); // Adicione o estado para os dados do gráfico de linha\n\n  useEffect(() => {\n    const eventCounts = {}; // Inicializa os contadores de eventos\n    const eventDuration = {}; // Inicializa os contadores de duração de evento \n    const timelineData = []; // Inicializa os dados para o gráfico de linha\n\n    const onDataReceived = receivedData => {\n      // Atualiza o estado dos contadores de eventos com base nos dados recebidos\n      const updatedEventCounts = CountRealTimeEvents(receivedData, eventCounts);\n\n      // Atualiza os contadores de duração de eventos com base nos dados recebidos\n      const updatedEventDurations = EventDurationRealTime(receivedData, eventDuration);\n      const newDuration = ConvertDataForScatterPlotRealTime(updatedEventDurations);\n\n      // Atualiza os dados da linha do tempo\n      timelineData.push({\n        time: new Date(),\n        ...updatedEventCounts\n      });\n\n      // Converte os dados atualizados em um formato adequado para os gráficos\n      const newData = Object.entries(updatedEventCounts).map(([eventType, count]) => ({\n        name: eventType,\n        value: count\n      }));\n\n      // Atualiza o estado com os novos dados dos gráficos\n      setRealTimeData(newData);\n      setEventDurations(newDuration);\n      setEventTimeline(timelineData);\n    };\n\n    // Inicia a recepção de dados em tempo real\n    KafkaDataReceiver(onDataReceived);\n  }, []); // O useEffect é executado apenas na montagem do componente\n  console.log('Existes: ', realTimeData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Bar Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RealTimeBarChart, {\n      data: realTimeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Scatter Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RealTimeScatterPlot, {\n      data: eventDurations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Event Timeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      data: eventTimeline\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTimeData, \"62GHzpmKtLp/wWCgEogfQkBh5pE=\");\n_c = RealTimeData;\nexport default RealTimeData;\nvar _c;\n$RefreshReg$(_c, \"RealTimeData\");","map":{"version":3,"names":["React","useEffect","useState","RealTimeBarChart","KafkaDataReceiver","CountRealTimeEvents","EventDurationRealTime","RealTimeScatterPlot","ConvertDataForScatterPlotRealTime","LineChart","jsxDEV","_jsxDEV","RealTimeData","_s","realTimeData","setRealTimeData","eventDurations","setEventDurations","eventTimeline","setEventTimeline","eventCounts","eventDuration","timelineData","onDataReceived","receivedData","updatedEventCounts","updatedEventDurations","newDuration","push","time","Date","newData","Object","entries","map","eventType","count","name","value","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/RealTimeData.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport RealTimeBarChart from './charts/RealTimeBarChart';\nimport KafkaDataReceiver from '../../api/OnlineData';\nimport CountRealTimeEvents from './CountRealTimeEvents';\nimport EventDurationRealTime from './EventDurationRealTime';\nimport RealTimeScatterPlot from './charts/RealTimeScatterPlot';\nimport ConvertDataForScatterPlotRealTime from './ConvertDataForScatterPlotRealTime';\nimport LineChart from './charts/LineChart'; // Importe o novo componente\n\nconst RealTimeData = () => {\n  const [realTimeData, setRealTimeData] = useState([]);\n  const [eventDurations, setEventDurations] = useState([]);\n  const [eventTimeline, setEventTimeline] = useState([]); // Adicione o estado para os dados do gráfico de linha\n\n  useEffect(() => {\n    const eventCounts = {}; // Inicializa os contadores de eventos\n    const eventDuration = {}; // Inicializa os contadores de duração de evento \n    const timelineData = []; // Inicializa os dados para o gráfico de linha\n\n    const onDataReceived = (receivedData) => {\n      // Atualiza o estado dos contadores de eventos com base nos dados recebidos\n      const updatedEventCounts = CountRealTimeEvents(receivedData, eventCounts);\n\n      // Atualiza os contadores de duração de eventos com base nos dados recebidos\n      const updatedEventDurations = EventDurationRealTime(receivedData, eventDuration);\n      const newDuration = ConvertDataForScatterPlotRealTime(updatedEventDurations);\n      \n      // Atualiza os dados da linha do tempo\n      timelineData.push({\n        time: new Date(),\n        ...updatedEventCounts,\n      });\n\n      // Converte os dados atualizados em um formato adequado para os gráficos\n      const newData = Object.entries(updatedEventCounts).map(([eventType, count]) => ({\n        name: eventType,\n        value: count,\n      }));\n\n      // Atualiza o estado com os novos dados dos gráficos\n      setRealTimeData(newData);\n      setEventDurations(newDuration);\n      setEventTimeline(timelineData);\n    };\n\n    // Inicia a recepção de dados em tempo real\n    KafkaDataReceiver(onDataReceived);\n  }, []); // O useEffect é executado apenas na montagem do componente\n  console.log('Existes: ', realTimeData)\n  return (\n    <div>\n      <h1>Real-Time Bar Chart</h1>\n      <RealTimeBarChart data={realTimeData} />\n      <h1>Real-Time Scatter Chart</h1>\n      <RealTimeScatterPlot data={eventDurations} />\n      <h1>Event Timeline</h1>\n      <LineChart data={eventTimeline} />\n    </div>\n  );\n};\n\nexport default RealTimeData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}