{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromBinaryExpression;\n/**\n * Extractor function for a BinaryExpression type value node.\n * A binary expression has a left and right side separated by an operator\n * such as `a + b`.\n *\n * @param - value - AST Value object with type `BinaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromBinaryExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n    left = value.left,\n    right = value.right;\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n  switch (operator) {\n    case '==':\n      return leftVal == rightVal;\n    // eslint-disable-line\n    case '!=':\n      return leftVal != rightVal;\n    // eslint-disable-line\n    case '===':\n      return leftVal === rightVal;\n    case '!==':\n      return leftVal !== rightVal;\n    case '<':\n      return leftVal < rightVal;\n    case '<=':\n      return leftVal <= rightVal;\n    case '>':\n      return leftVal > rightVal;\n    case '>=':\n      return leftVal >= rightVal;\n    case '<<':\n      return leftVal << rightVal;\n    // eslint-disable-line no-bitwise\n    case '>>':\n      return leftVal >> rightVal;\n    // eslint-disable-line no-bitwise\n    case '>>>':\n      return leftVal >>> rightVal;\n    // eslint-disable-line no-bitwise\n    case '+':\n      return leftVal + rightVal;\n    case '-':\n      return leftVal - rightVal;\n    case '*':\n      return leftVal * rightVal;\n    case '/':\n      return leftVal / rightVal;\n    case '%':\n      return leftVal % rightVal;\n    case '|':\n      return leftVal | rightVal;\n    // eslint-disable-line no-bitwise\n    case '^':\n      return leftVal ^ rightVal;\n    // eslint-disable-line no-bitwise\n    case '&':\n      return leftVal & rightVal;\n    // eslint-disable-line no-bitwise\n    case 'in':\n      try {\n        return leftVal in rightVal;\n      } catch (err) {\n        return false;\n      }\n    case 'instanceof':\n      if (typeof rightVal !== 'function') {\n        return false;\n      }\n      return leftVal instanceof rightVal;\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","extractValueFromBinaryExpression","getValue","require","operator","left","right","leftVal","rightVal","err","undefined"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/node_modules/jsx-ast-utils/lib/values/expressions/BinaryExpression.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromBinaryExpression;\n/**\n * Extractor function for a BinaryExpression type value node.\n * A binary expression has a left and right side separated by an operator\n * such as `a + b`.\n *\n * @param - value - AST Value object with type `BinaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromBinaryExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n      left = value.left,\n      right = value.right;\n\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n\n  switch (operator) {\n    case '==':\n      return leftVal == rightVal; // eslint-disable-line\n    case '!=':\n      return leftVal != rightVal; // eslint-disable-line\n    case '===':\n      return leftVal === rightVal;\n    case '!==':\n      return leftVal !== rightVal;\n    case '<':\n      return leftVal < rightVal;\n    case '<=':\n      return leftVal <= rightVal;\n    case '>':\n      return leftVal > rightVal;\n    case '>=':\n      return leftVal >= rightVal;\n    case '<<':\n      return leftVal << rightVal; // eslint-disable-line no-bitwise\n    case '>>':\n      return leftVal >> rightVal; // eslint-disable-line no-bitwise\n    case '>>>':\n      return leftVal >>> rightVal; // eslint-disable-line no-bitwise\n    case '+':\n      return leftVal + rightVal;\n    case '-':\n      return leftVal - rightVal;\n    case '*':\n      return leftVal * rightVal;\n    case '/':\n      return leftVal / rightVal;\n    case '%':\n      return leftVal % rightVal;\n    case '|':\n      return leftVal | rightVal; // eslint-disable-line no-bitwise\n    case '^':\n      return leftVal ^ rightVal; // eslint-disable-line no-bitwise\n    case '&':\n      return leftVal & rightVal; // eslint-disable-line no-bitwise\n    case 'in':\n      try {\n        return leftVal in rightVal;\n      } catch (err) {\n        return false;\n      }\n    case 'instanceof':\n      if (typeof rightVal !== 'function') {\n        return false;\n      }\n      return leftVal instanceof rightVal;\n    default:\n      return undefined;\n  }\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,gCAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gCAAgCA,CAACF,KAAK,EAAE;EAC/C;EACA,IAAIG,QAAQ,GAAGC,OAAO,CAAC,GAAG,CAAC,CAACH,OAAO;EACnC,IAAII,QAAQ,GAAGL,KAAK,CAACK,QAAQ;IACzBC,IAAI,GAAGN,KAAK,CAACM,IAAI;IACjBC,KAAK,GAAGP,KAAK,CAACO,KAAK;EAEvB,IAAIC,OAAO,GAAGL,QAAQ,CAACG,IAAI,CAAC;EAC5B,IAAIG,QAAQ,GAAGN,QAAQ,CAACI,KAAK,CAAC;EAE9B,QAAQF,QAAQ;IACd,KAAK,IAAI;MACP,OAAOG,OAAO,IAAIC,QAAQ;IAAE;IAC9B,KAAK,IAAI;MACP,OAAOD,OAAO,IAAIC,QAAQ;IAAE;IAC9B,KAAK,KAAK;MACR,OAAOD,OAAO,KAAKC,QAAQ;IAC7B,KAAK,KAAK;MACR,OAAOD,OAAO,KAAKC,QAAQ;IAC7B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAC3B,KAAK,IAAI;MACP,OAAOD,OAAO,IAAIC,QAAQ;IAC5B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAC3B,KAAK,IAAI;MACP,OAAOD,OAAO,IAAIC,QAAQ;IAC5B,KAAK,IAAI;MACP,OAAOD,OAAO,IAAIC,QAAQ;IAAE;IAC9B,KAAK,IAAI;MACP,OAAOD,OAAO,IAAIC,QAAQ;IAAE;IAC9B,KAAK,KAAK;MACR,OAAOD,OAAO,KAAKC,QAAQ;IAAE;IAC/B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAC3B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAC3B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAC3B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAC3B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAC3B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAAE;IAC7B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAAE;IAC7B,KAAK,GAAG;MACN,OAAOD,OAAO,GAAGC,QAAQ;IAAE;IAC7B,KAAK,IAAI;MACP,IAAI;QACF,OAAOD,OAAO,IAAIC,QAAQ;MAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,OAAO,KAAK;MACd;IACF,KAAK,YAAY;MACf,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;QAClC,OAAO,KAAK;MACd;MACA,OAAOD,OAAO,YAAYC,QAAQ;IACpC;MACE,OAAOE,SAAS;EACpB;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}