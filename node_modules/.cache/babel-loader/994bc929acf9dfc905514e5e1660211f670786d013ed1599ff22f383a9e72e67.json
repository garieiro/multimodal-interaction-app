{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport fetchStaticDataFromAPI from './api/StaticData';\nimport KafkaDataReceiver from './api/OnlineData';\nimport './App.css';\nimport BarChart from './components/charts/staticData/BarChart';\nimport ScatterPlot from './components/charts/staticData/ScatterPlot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [staticData, setStaticData] = useState([]);\n  const [onlineData, setOnlineData] = useState([]);\n  const [realCount, setRealCount] = useState([]);\n  useEffect(() => {\n    const fetchStaticData = async () => {\n      try {\n        const fetchedStaticData = await fetchStaticDataFromAPI();\n        setStaticData(fetchedStaticData);\n      } catch (error) {\n        console.error('Error fetching Static Data:', error);\n      }\n    };\n    fetchStaticData();\n  }, []);\n  console.log(\"Static Data: \", staticData);\n  useEffect(() => {\n    const onDataReceived = receivedData => {\n      setOnlineData(receivedData);\n    };\n    KafkaDataReceiver(onDataReceived);\n  }, []);\n  console.log(\"Online Data: \", onlineData);\n\n  // Função para contar o número de eventos em cada array \n  const countEvents = dataArray => {\n    const eventCounts = {};\n    dataArray.forEach(events => {\n      events.forEach(event => {\n        const eventType = event.EventType;\n        if (eventType in eventCounts) {\n          eventCounts[eventType]++;\n        } else {\n          eventCounts[eventType] = 1;\n        }\n      });\n    });\n    return eventCounts;\n  };\n  const countRealTimeEvents = data => {\n    const eventCounts = {};\n\n    // Verifica se os dados recebidos são um objeto\n    if (typeof data === 'object' && data.data) {\n      const event = JSON.parse(data.data); // Converte a string JSON para objeto JavaScript\n      const eventType = event.EventType;\n\n      // Incrementa o contador do tipo de evento\n      if (eventType in eventCounts) {\n        eventCounts[eventType]++;\n      } else {\n        eventCounts[eventType] = 1;\n      }\n    }\n    return eventCounts;\n  };\n  useEffect(() => {\n    const onDataReceived = receivedData => {\n      const realEventCounts = countRealTimeEvents(receivedData);\n      setRealCount(realEventCounts);\n      console.log('Event counts:', realEventCounts);\n    };\n    KafkaDataReceiver(onDataReceived);\n  }, []);\n  const calculateEventDurations = dataArray => {\n    const eventDurations = {};\n    dataArray.forEach(eventsArray => {\n      eventsArray.forEach(event => {\n        const eventType = event.EventType;\n        const startTimestamp = new Date(event.Start);\n        const endTimestamp = new Date(event.End);\n        const duration = endTimestamp - startTimestamp;\n        if (eventType in eventDurations) {\n          eventDurations[eventType].push(duration);\n        } else {\n          eventDurations[eventType] = [duration];\n        }\n      });\n    });\n    return eventDurations;\n  };\n  const convertDataForScatterPlot = time => {\n    const convertedData = [];\n    for (const eventType in time) {\n      const durations = time[eventType];\n      const averageDuration = durations.reduce((acc, curr) => acc + curr, 0) / durations.length;\n\n      // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n      const xCoordinate = eventType;\n\n      // Usar a média das durações como coordenada y\n      const yCoordinate = averageDuration;\n\n      // Adicionar o ponto ao array convertido\n      convertedData.push({\n        x: xCoordinate,\n        y: yCoordinate\n      });\n    }\n    return convertedData;\n  };\n  const eventDataCounts = countEvents(staticData);\n  const eventDurations = calculateEventDurations(staticData);\n  const scatterPlotData = convertDataForScatterPlot(eventDurations);\n  const eventStaticDataForChart = Object.entries(eventDataCounts).map(([eventType, count]) => ({\n    name: eventType,\n    value: count\n  }));\n  const eventOnlineDataForChart = Object.entries(realCount).map(([eventType, count]) => ({\n    name: eventType,\n    value: count\n  }));\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        data: eventStaticDataForChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Scatter Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ScatterPlot, {\n        data: scatterPlotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        data: eventOnlineDataForChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Scatter Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oSIqEvPVwowg+zHy8cNlD8QraDM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchStaticDataFromAPI","KafkaDataReceiver","BarChart","ScatterPlot","jsxDEV","_jsxDEV","App","_s","staticData","setStaticData","onlineData","setOnlineData","realCount","setRealCount","fetchStaticData","fetchedStaticData","error","console","log","onDataReceived","receivedData","countEvents","dataArray","eventCounts","forEach","events","event","eventType","EventType","countRealTimeEvents","data","JSON","parse","realEventCounts","calculateEventDurations","eventDurations","eventsArray","startTimestamp","Date","Start","endTimestamp","End","duration","push","convertDataForScatterPlot","time","convertedData","durations","averageDuration","reduce","acc","curr","length","xCoordinate","yCoordinate","x","y","eventDataCounts","scatterPlotData","eventStaticDataForChart","Object","entries","map","count","name","value","eventOnlineDataForChart","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport fetchStaticDataFromAPI from './api/StaticData';\nimport KafkaDataReceiver from './api/OnlineData';\n\nimport './App.css';\nimport BarChart from './components/charts/staticData/BarChart';\nimport ScatterPlot from './components/charts/staticData/ScatterPlot';\n\nfunction App() {\n  const [staticData, setStaticData] = useState([]);\n  const [onlineData, setOnlineData] = useState([]);\n  const [realCount, setRealCount] = useState([]); \n\n  useEffect(() => {\n    const fetchStaticData = async () => {\n      try {\n        const fetchedStaticData = await fetchStaticDataFromAPI();\n        setStaticData(fetchedStaticData);\n      } catch (error) {\n        console.error('Error fetching Static Data:', error);\n      }\n    };\n\n    fetchStaticData();\n  }, []);\n\n  console.log(\"Static Data: \", staticData)\n  \n  useEffect(() => {\n    const onDataReceived = (receivedData) => {\n      setOnlineData(receivedData);\n    };\n\n    KafkaDataReceiver(onDataReceived);\n  }, []);\n\n  console.log(\"Online Data: \", onlineData)\n\n\n\n  // Função para contar o número de eventos em cada array \n  const countEvents = (dataArray) => {\n    const eventCounts = {};\n\n    dataArray.forEach((events) => {\n      events.forEach((event) => {\n        const eventType = event.EventType;\n        if (eventType in eventCounts) {\n          eventCounts[eventType]++;\n        } else {\n          eventCounts[eventType] = 1;\n        }\n      });\n    });\n\n    return eventCounts;\n  };\n\n  const countRealTimeEvents = (data) => {\n    const eventCounts = {};\n  \n    // Verifica se os dados recebidos são um objeto\n    if (typeof data === 'object' && data.data) {\n      const event = JSON.parse(data.data); // Converte a string JSON para objeto JavaScript\n      const eventType = event.EventType;\n  \n      // Incrementa o contador do tipo de evento\n      if (eventType in eventCounts) {\n        eventCounts[eventType]++;\n      } else {\n        eventCounts[eventType] = 1;\n      }\n    }\n  \n    return eventCounts;\n  };\n\n  useEffect(() => {\n  const onDataReceived = (receivedData) => {\n    const realEventCounts = countRealTimeEvents(receivedData);\n    setRealCount(realEventCounts)\n    console.log('Event counts:', realEventCounts);\n  };\n\n  KafkaDataReceiver(onDataReceived);\n}, []);\n\n  \n  \n\n  const calculateEventDurations = (dataArray) => {\n    const eventDurations = {};\n  \n    dataArray.forEach((eventsArray) => {\n      eventsArray.forEach((event) => {\n        const eventType = event.EventType;\n        const startTimestamp = new Date(event.Start);\n        const endTimestamp = new Date(event.End);\n        const duration = endTimestamp - startTimestamp;\n  \n        if (eventType in eventDurations) {\n          eventDurations[eventType].push(duration);\n        } else {\n          eventDurations[eventType] = [duration];\n        }\n      });\n    });\n\n    return eventDurations;\n  };\n\n  const convertDataForScatterPlot = (time) => {\n    const convertedData = [];\n    \n    for (const eventType in time) {\n      const durations = time[eventType];\n      const averageDuration = durations.reduce((acc, curr) => acc + curr, 0) / durations.length;\n      \n      // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n      const xCoordinate = eventType;\n      \n      // Usar a média das durações como coordenada y\n      const yCoordinate = averageDuration;\n      \n      // Adicionar o ponto ao array convertido\n      convertedData.push({ x: xCoordinate, y: yCoordinate });\n    }\n    \n    return convertedData;\n  };\n  \n  const eventDataCounts = countEvents(staticData);\n  const eventDurations = calculateEventDurations(staticData);\n  const scatterPlotData = convertDataForScatterPlot(eventDurations);\n\n  const eventStaticDataForChart = Object.entries(eventDataCounts).map(([eventType, count]) => ({\n    name: eventType,\n    value: count,\n  }));\n\n\n  const eventOnlineDataForChart = Object.entries(realCount).map(([eventType, count]) => ({\n    name: eventType,\n    value: count,\n  }));\n\n\n  return (\n    <React.Fragment>\n      <div>\n      <h1>Bar Chart</h1>\n      <BarChart data={eventStaticDataForChart} />\n    </div>\n    <div>\n      <h1>Scatter Plot</h1>\n      <ScatterPlot data={scatterPlotData} />\n    </div>\n    <h1>Real Time</h1>\n    <div>\n      <h1>Bar Chart</h1>\n      <BarChart data={eventOnlineDataForChart} />\n    </div>\n    <div>\n      <h1>Scatter Plot</h1>\n  \n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}