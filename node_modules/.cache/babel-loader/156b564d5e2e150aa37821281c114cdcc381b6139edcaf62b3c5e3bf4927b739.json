{"ast":null,"code":"const transformDataToBoxplot = data => {\n  // Extraindo os tipos únicos de eventos\n  const eventLabels = new Set();\n  Object.values(data).forEach(events => {\n    events.forEach(event => {\n      eventLabels.add(event.Type);\n    });\n  });\n\n  // Inicializando o resultado com a estrutura correta\n  const results = Array.from(eventLabels).map(label => ({\n    label,\n    values: []\n  }));\n\n  // Calculando a duração de cada evento e preenchendo os valores\n  Object.values(data).forEach(events => {\n    events.forEach(event => {\n      const labelIndex = results.findIndex(result => result.label === event.Type);\n      const startTime = new Date(event.Start).getTime();\n      const endTime = new Date(event.End).getTime();\n      const duration = (endTime - startTime) / 1000; // duração em segundos\n      results[labelIndex].values.push(duration);\n    });\n  });\n  return results;\n};\nexport default transformDataToBoxplot;","map":{"version":3,"names":["transformDataToBoxplot","data","eventLabels","Set","Object","values","forEach","events","event","add","Type","results","Array","from","map","label","labelIndex","findIndex","result","startTime","Date","Start","getTime","endTime","End","duration","push"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/TransformDate/transformDataToBoxplot.js"],"sourcesContent":["const transformDataToBoxplot = (data) => {\n  // Extraindo os tipos únicos de eventos\n  const eventLabels = new Set()\n  Object.values(data).forEach((events) => {\n    events.forEach((event) => {\n      eventLabels.add(event.Type)\n    })\n  })\n\n  // Inicializando o resultado com a estrutura correta\n  const results = Array.from(eventLabels).map((label) => ({\n    label,\n    values: [],\n  }))\n\n  // Calculando a duração de cada evento e preenchendo os valores\n  Object.values(data).forEach((events) => {\n    events.forEach((event) => {\n      const labelIndex = results.findIndex(\n        (result) => result.label === event.Type\n      )\n      const startTime = new Date(event.Start).getTime()\n      const endTime = new Date(event.End).getTime()\n      const duration = (endTime - startTime) / 1000 // duração em segundos\n      results[labelIndex].values.push(duration)\n    })\n  })\n\n  return results\n}\n\nexport default transformDataToBoxplot\n"],"mappings":"AAAA,MAAMA,sBAAsB,GAAIC,IAAI,IAAK;EACvC;EACA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC7BC,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAACK,OAAO,CAAEC,MAAM,IAAK;IACtCA,MAAM,CAACD,OAAO,CAAEE,KAAK,IAAK;MACxBN,WAAW,CAACO,GAAG,CAACD,KAAK,CAACE,IAAI,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAACX,WAAW,CAAC,CAACY,GAAG,CAAEC,KAAK,KAAM;IACtDA,KAAK;IACLV,MAAM,EAAE;EACV,CAAC,CAAC,CAAC;;EAEH;EACAD,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAACK,OAAO,CAAEC,MAAM,IAAK;IACtCA,MAAM,CAACD,OAAO,CAAEE,KAAK,IAAK;MACxB,MAAMQ,UAAU,GAAGL,OAAO,CAACM,SAAS,CACjCC,MAAM,IAAKA,MAAM,CAACH,KAAK,KAAKP,KAAK,CAACE,IACrC,CAAC;MACD,MAAMS,SAAS,GAAG,IAAIC,IAAI,CAACZ,KAAK,CAACa,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC;MACjD,MAAMC,OAAO,GAAG,IAAIH,IAAI,CAACZ,KAAK,CAACgB,GAAG,CAAC,CAACF,OAAO,CAAC,CAAC;MAC7C,MAAMG,QAAQ,GAAG,CAACF,OAAO,GAAGJ,SAAS,IAAI,IAAI,EAAC;MAC9CR,OAAO,CAACK,UAAU,CAAC,CAACX,MAAM,CAACqB,IAAI,CAACD,QAAQ,CAAC;IAC3C,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOd,OAAO;AAChB,CAAC;AAED,eAAeX,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}