{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport fetchStaticDataFromAPI from './api/StaticData';\nimport './App.css';\nimport BarChart from './components/charts/staticData/BarChart';\nimport ScatterPlot from './components/charts/staticData/ScatterPlot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [staticData, setStaticData] = useState([]);\n  const [onlineData, setOnlineData] = useState([]);\n  useEffect(() => {\n    const fetchStaticData = async () => {\n      try {\n        const fetchedStaticData = await fetchStaticDataFromAPI();\n        setStaticData(fetchedStaticData);\n      } catch (error) {\n        console.error('Error fetching Static Data:', error);\n      }\n    };\n    fetchStaticData();\n  }, []);\n  useEffect(() => {\n    const fetchOnlineData = async () => {\n      try {\n        const fetchedOnlineData = await fetchOnlineDataFromAPI();\n        setOnlineData(fetchedOnlineData);\n      } catch (error) {\n        console.error('Error fetching Online Data:', error);\n      }\n    };\n    fetchOnlineDataFromAPI();\n  }, []);\n\n  // Função para contar o número de eventos em cada array \n  const countEvents = dataArray => {\n    const eventCounts = {};\n    dataArray.forEach(events => {\n      events.forEach(event => {\n        const eventType = event.EventType;\n        if (eventType in eventCounts) {\n          eventCounts[eventType]++;\n        } else {\n          eventCounts[eventType] = 1;\n        }\n      });\n    });\n    return eventCounts;\n  };\n  const calculateEventDurations = dataArray => {\n    const eventDurations = {};\n    dataArray.forEach(eventsArray => {\n      eventsArray.forEach(event => {\n        const eventType = event.EventType;\n        const startTimestamp = new Date(event.Start);\n        const endTimestamp = new Date(event.End);\n        const duration = endTimestamp - startTimestamp;\n        if (eventType in eventDurations) {\n          eventDurations[eventType].push(duration);\n        } else {\n          eventDurations[eventType] = [duration];\n        }\n      });\n    });\n    return eventDurations;\n  };\n  const convertDataForScatterPlot = time => {\n    const convertedData = [];\n    for (const eventType in time) {\n      const durations = time[eventType];\n      console.log(\"evento\", eventType);\n      console.log(\"Aqui\", durations);\n      const averageDuration = durations.reduce((acc, curr) => acc + curr, 0) / durations.length;\n\n      // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n      const xCoordinate = eventType;\n\n      // Usar a média das durações como coordenada y\n      const yCoordinate = averageDuration;\n\n      // Adicionar o ponto ao array convertido\n      convertedData.push({\n        x: xCoordinate,\n        y: yCoordinate\n      });\n    }\n    return convertedData;\n  };\n  const eventDataCounts = countEvents(staticData);\n  const eventDurations = calculateEventDurations(staticData);\n  const scatterPlotData = convertDataForScatterPlot(eventDurations);\n  const eventDataForChart = Object.entries(eventDataCounts).map(([eventType, count]) => ({\n    name: eventType,\n    value: count\n  }));\n  console.log('dados do gráfico:', eventDataForChart);\n  console.log('Duração dos eventos:', eventDurations);\n  console.log('Duraçãssso dos eventos:', scatterPlotData);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        data: eventDataForChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Scatter Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ScatterPlot, {\n        data: scatterPlotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ImEK5crpqnMrqiDx0W+nAAhtBDA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchStaticDataFromAPI","BarChart","ScatterPlot","jsxDEV","_jsxDEV","App","_s","staticData","setStaticData","onlineData","setOnlineData","fetchStaticData","fetchedStaticData","error","console","fetchOnlineData","fetchedOnlineData","fetchOnlineDataFromAPI","countEvents","dataArray","eventCounts","forEach","events","event","eventType","EventType","calculateEventDurations","eventDurations","eventsArray","startTimestamp","Date","Start","endTimestamp","End","duration","push","convertDataForScatterPlot","time","convertedData","durations","log","averageDuration","reduce","acc","curr","length","xCoordinate","yCoordinate","x","y","eventDataCounts","scatterPlotData","eventDataForChart","Object","entries","map","count","name","value","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport fetchStaticDataFromAPI from './api/StaticData';\nimport './App.css';\nimport BarChart from './components/charts/staticData/BarChart';\nimport ScatterPlot from './components/charts/staticData/ScatterPlot';\n\nfunction App() {\n  const [staticData, setStaticData] = useState([]);\n  const [onlineData, setOnlineData] = useState([]);\n\n  useEffect(() => {\n    const fetchStaticData = async () => {\n      try {\n        const fetchedStaticData = await fetchStaticDataFromAPI();\n        setStaticData(fetchedStaticData);\n      } catch (error) {\n        console.error('Error fetching Static Data:', error);\n      }\n    };\n\n    fetchStaticData();\n  }, []);\n\n  useEffect(() => {\n    const fetchOnlineData = async () => {\n      try {\n        const fetchedOnlineData = await fetchOnlineDataFromAPI();\n        setOnlineData(fetchedOnlineData);\n      } catch (error) {\n        console.error('Error fetching Online Data:', error);\n      }\n    };\n\n    fetchOnlineDataFromAPI();\n  }, []);\n\n\n  // Função para contar o número de eventos em cada array \n  const countEvents = (dataArray) => {\n    const eventCounts = {};\n\n    dataArray.forEach((events) => {\n      events.forEach((event) => {\n        const eventType = event.EventType;\n        if (eventType in eventCounts) {\n          eventCounts[eventType]++;\n        } else {\n          eventCounts[eventType] = 1;\n        }\n      });\n    });\n\n    return eventCounts;\n  };\n\n  const calculateEventDurations = (dataArray) => {\n    const eventDurations = {};\n  \n    dataArray.forEach((eventsArray) => {\n      eventsArray.forEach((event) => {\n        const eventType = event.EventType;\n        const startTimestamp = new Date(event.Start);\n        const endTimestamp = new Date(event.End);\n        const duration = endTimestamp - startTimestamp;\n  \n        if (eventType in eventDurations) {\n          eventDurations[eventType].push(duration);\n        } else {\n          eventDurations[eventType] = [duration];\n        }\n      });\n    });\n\n    return eventDurations;\n  };\n\n  const convertDataForScatterPlot = (time) => {\n    const convertedData = [];\n    \n    for (const eventType in time) {\n      const durations = time[eventType];\n      console.log(\"evento\", eventType)\n      console.log(\"Aqui\", durations)\n      const averageDuration = durations.reduce((acc, curr) => acc + curr, 0) / durations.length;\n      \n      // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n      const xCoordinate = eventType;\n      \n      // Usar a média das durações como coordenada y\n      const yCoordinate = averageDuration;\n      \n      // Adicionar o ponto ao array convertido\n      convertedData.push({ x: xCoordinate, y: yCoordinate });\n    }\n    \n    return convertedData;\n  };\n  \n  const eventDataCounts = countEvents(staticData);\n  const eventDurations = calculateEventDurations(staticData);\n  const scatterPlotData = convertDataForScatterPlot(eventDurations);\n\n  const eventDataForChart = Object.entries(eventDataCounts).map(([eventType, count]) => ({\n    name: eventType,\n    value: count,\n  }));\n\n  console.log('dados do gráfico:', eventDataForChart);\n  console.log('Duração dos eventos:', eventDurations);\n  console.log('Duraçãssso dos eventos:', scatterPlotData);\n\n  return (\n    <React.Fragment>\n      <div>\n      <h1>Bar Chart</h1>\n      <BarChart data={eventDataForChart} />\n    </div>\n    <div>\n      <h1>Scatter Plot</h1>\n      <ScatterPlot data={scatterPlotData} />\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}