{"ast":null,"code":"var _jsxFileName = \"/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/components/buildCharts/timeLineChart/StaticTimeLine.js\",\n  _s = $RefreshSig$();\nimport TimelineChart from '../../charts/TimeLineChart';\nimport React, { useEffect, useState } from 'react';\nimport { fetchStaticTimeLineFromAPI } from '../../../api/StaticData';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StaticTimeLine = ({\n  onDataReceived,\n  onWordDataReceived,\n  data,\n  onEventTypeColor,\n  onExpDataReceived,\n  onExpLabelReceived\n}) => {\n  _s();\n  const [timesData, setTimesData] = useState([]);\n  const [initialData, setInitialData] = useState([]);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [eventColor, setEventColor] = useState({});\n  const [showButton, setShowButton] = useState(false);\n  useEffect(() => {\n    const fetchTimeLine = async () => {\n      try {\n        let fetchTimeLineData = [];\n        if (data) {\n          fetchTimeLineData = data;\n        } else {\n          fetchTimeLineData = await fetchStaticTimeLineFromAPI();\n          setInitialData(fetchTimeLineData);\n        }\n        setEventColor(onEventTypeColor);\n        setTimesData(fetchTimeLineData);\n        setDataLoaded(true);\n      } catch (error) {\n        console.error('Error fetching TimeLine data:', error);\n      }\n    };\n    fetchTimeLine().catch(error => console.error('Error fetching TimeLine data:', error));\n  }, [data, onEventTypeColor]);\n  const handleLabelClick = async label => {\n    const experienceIdMatch = label.match(/\\d+/);\n    const experienceId = experienceIdMatch ? experienceIdMatch[0] : null;\n    console.log('Label:', label);\n    if (experienceId) {\n      const fetchedData = await fetchStaticTimeLineFromAPI(experienceId);\n      setTimesData(fetchedData);\n      onExpLabelReceived(label);\n      setDataLoaded(true);\n      if (label) setShowButton(true);\n    } else {\n      console.error('Erro: Não foi possível extrair o ID da experiência da label:', label);\n    }\n  };\n  const resetToInitialData = () => {\n    setTimesData(initialData);\n    setEventColor('');\n    setShowButton(false);\n  };\n  console.log('Show:', showButton);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [dataLoaded && /*#__PURE__*/_jsxDEV(TimelineChart, {\n      data: timesData,\n      eventColor: eventColor,\n      handleLabelClick: handleLabelClick,\n      onDataReceived: onDataReceived,\n      onExpDataReceived: onExpDataReceived,\n      onWordDataReceived: onWordDataReceived\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), showButton && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: resetToInitialData,\n      className: \"btn btn-dark\",\n      style: {\n        marginTop: '20px',\n        display: 'block',\n        width: 'max-content'\n      },\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(StaticTimeLine, \"UXsQy+uzT8HCLX+X61w6B6VCUjY=\");\n_c = StaticTimeLine;\nexport default StaticTimeLine;\nvar _c;\n$RefreshReg$(_c, \"StaticTimeLine\");","map":{"version":3,"names":["TimelineChart","React","useEffect","useState","fetchStaticTimeLineFromAPI","Button","jsxDEV","_jsxDEV","StaticTimeLine","onDataReceived","onWordDataReceived","data","onEventTypeColor","onExpDataReceived","onExpLabelReceived","_s","timesData","setTimesData","initialData","setInitialData","dataLoaded","setDataLoaded","eventColor","setEventColor","showButton","setShowButton","fetchTimeLine","fetchTimeLineData","error","console","catch","handleLabelClick","label","experienceIdMatch","match","experienceId","log","fetchedData","resetToInitialData","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","style","marginTop","display","width","_c","$RefreshReg$"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/components/buildCharts/timeLineChart/StaticTimeLine.js"],"sourcesContent":["import TimelineChart from '../../charts/TimeLineChart'\nimport React, { useEffect, useState } from 'react'\nimport { fetchStaticTimeLineFromAPI } from '../../../api/StaticData'\nimport { Button } from 'react-bootstrap'\n\nconst StaticTimeLine = ({\n  onDataReceived,\n  onWordDataReceived,\n  data,\n  onEventTypeColor,\n  onExpDataReceived,\n  onExpLabelReceived,\n}) => {\n  const [timesData, setTimesData] = useState([])\n  const [initialData, setInitialData] = useState([])\n  const [dataLoaded, setDataLoaded] = useState(false)\n  const [eventColor, setEventColor] = useState({})\n  const [showButton, setShowButton] = useState(false)\n\n  useEffect(() => {\n    const fetchTimeLine = async () => {\n      try {\n        let fetchTimeLineData = []\n        if (data) {\n          fetchTimeLineData = data\n        } else {\n          fetchTimeLineData = await fetchStaticTimeLineFromAPI()\n          setInitialData(fetchTimeLineData)\n        }\n        setEventColor(onEventTypeColor)\n        setTimesData(fetchTimeLineData)\n        setDataLoaded(true)\n      } catch (error) {\n        console.error('Error fetching TimeLine data:', error)\n      }\n    }\n    fetchTimeLine().catch((error) =>\n      console.error('Error fetching TimeLine data:', error)\n    )\n  }, [data, onEventTypeColor])\n\n  const handleLabelClick = async (label) => {\n    const experienceIdMatch = label.match(/\\d+/)\n    const experienceId = experienceIdMatch ? experienceIdMatch[0] : null\n    console.log('Label:', label)\n    if (experienceId) {\n      const fetchedData = await fetchStaticTimeLineFromAPI(experienceId)\n      setTimesData(fetchedData)\n      onExpLabelReceived(label)\n      setDataLoaded(true)\n      if (label) setShowButton(true)\n    } else {\n      console.error(\n        'Erro: Não foi possível extrair o ID da experiência da label:',\n        label\n      )\n    }\n  }\n\n  const resetToInitialData = () => {\n    setTimesData(initialData)\n    setEventColor('')\n    setShowButton(false)\n  }\n  console.log('Show:', showButton)\n  return (\n    <div>\n      {dataLoaded && (\n        <TimelineChart\n          data={timesData}\n          eventColor={eventColor}\n          handleLabelClick={handleLabelClick}\n          onDataReceived={onDataReceived}\n          onExpDataReceived={onExpDataReceived}\n          onWordDataReceived={onWordDataReceived}\n        />\n      )}\n      {showButton && (\n        <Button\n          onClick={resetToInitialData}\n          className=\"btn btn-dark\"\n          style={{ marginTop: '20px', display: 'block', width: 'max-content' }}\n        >\n          Back\n        </Button>\n      )}\n    </div>\n  )\n}\n\nexport default StaticTimeLine\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}