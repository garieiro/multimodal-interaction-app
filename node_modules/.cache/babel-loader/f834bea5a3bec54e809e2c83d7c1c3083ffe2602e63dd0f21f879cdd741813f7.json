{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nconst BoxPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    d3.select(svgRef.current).selectAll('*').remove();\n    if (!data || data.length === 0) {\n      return;\n    }\n    const width = 928;\n    const height = 600;\n    const marginTop = 20;\n    const marginRight = 20;\n    const marginBottom = 30;\n    const marginLeft = 40;\n\n    // Bin the data and derive the values (inter-quartile range, outliers…) for each bin.\n    const n = width / 40;\n    const bins = d3.bin().thresholds(n).value(d => d.label)(data).map(bin => {\n      bin.sort((a, b) => a.values - b.values);\n      const values = bin.map(d => d.values);\n      const min = values[0];\n      const max = values[values.length - 1];\n      const q1 = d3.quantile(values, 0.25);\n      const q2 = d3.quantile(values, 0.5);\n      const q3 = d3.quantile(values, 0.75);\n      const iqr = q3 - q1; // interquartile range\n      const r0 = Math.max(min, q1 - iqr * 1.5);\n      const r1 = Math.min(max, q3 + iqr * 1.5);\n      bin.quartiles = [q1, q2, q3];\n      bin.range = [r0, r1];\n      bin.outliers = bin.filter(v => v.values < r0 || v.values > r1);\n      return bin;\n    });\n\n    // Prepare the positional scales.\n    const x = d3.scaleLinear().domain([d3.min(bins, d => d.x0), d3.max(bins, d => d.x1)]).rangeRound([marginLeft, width - marginRight]);\n    const y = d3.scaleLinear().domain([d3.min(bins, d => d.range[0]), d3.max(bins, d => d.range[1])]).nice().range([height - marginBottom, marginTop]);\n\n    // Create the SVG container.\n    const svg = d3.create('svg').attr('width', width).attr('height', height).attr('viewBox', [0, 0, width, height]).attr('style', 'max-width: 100%; height: auto; font: 10px sans-serif;').attr('text-anchor', 'middle');\n\n    // Create a visual representation for each bin.\n    const g = svg.append('g').selectAll('g').data(bins).join('g');\n\n    // Range.\n    g.append('path').attr('stroke', 'currentColor').attr('d', d => `\n        M${x((d.x0 + d.x1) / 2)},${y(d.range[1])}\n        V${y(d.range[0])}\n      `);\n\n    // Quartiles.\n    g.append('path').attr('fill', '#ddd').attr('d', d => `\n        M${x(d.x0) + 1},${y(d.quartiles[2])}\n        H${x(d.x1)}\n        V${y(d.quartiles[0])}\n        H${x(d.x0) + 1}\n        Z\n      `);\n\n    // Median.\n    g.append('path').attr('stroke', 'currentColor').attr('stroke-width', 2).attr('d', d => `\n        M${x(d.x0) + 1},${y(d.quartiles[1])}\n        H${x(d.x1)}\n      `);\n\n    // Outliers, with a bit of jitter.\n    g.append('g').attr('fill', 'currentColor').attr('fill-opacity', 0.2).attr('stroke', 'none').attr('transform', d => `translate(${x((d.x0 + d.x1) / 2)},0)`).selectAll('circle').data(d => d.outliers).join('circle').attr('r', 2).attr('cx', () => (Math.random() - 0.5) * 4).attr('cy', d => y(d.price));\n\n    // Append the x axis.\n    svg.append('g').attr('transform', `translate(0,${height - marginBottom})`).call(d3.axisBottom(x).ticks(n).tickSizeOuter(0));\n\n    // Append the y axis.\n    svg.append('g').attr('transform', `translate(${marginLeft},0)`).call(d3.axisLeft(y).ticks(null, 's')).call(g => g.select('.domain').remove());\n    return svg.node();\n\n    /* const boxWidth = 70\n    const minBoxSpacing = 30\n    const totalWidth = (boxWidth + minBoxSpacing) * data.length\n     const minValues = data.map((dataset) => d3.min(dataset.values))\n    const maxValues = data.map((dataset) => d3.max(dataset.values))\n    const minAll = d3.min(minValues) - 2\n    const maxAll = d3.max(maxValues) + 2\n     const y = d3.scaleLinear().domain([minAll, maxAll]).range([height, 0])\n     const svg = d3\n      .select(svgRef.current)\n      .attr('width', '100%')\n      .attr('height', '100%')\n      .attr(\n        'viewBox',\n        `0 0 ${totalWidth + marginLeft + marginRight} ${height + marginTop + marginBottom}`\n      )\n      .style('font', '10px sans-serif')\n     const g = svg\n      .append('g')\n      .attr('transform', `translate(${marginLeft},${marginTop})`)\n     const datasetWidth = totalWidth / data.length\n     data.forEach((dataset, index) => {\n      const data_sorted = dataset.values.sort(d3.ascending)\n      const q1 = d3.quantile(data_sorted, 0.25)\n      const median = d3.quantile(data_sorted, 0.5)\n      const q3 = d3.quantile(data_sorted, 0.75)\n      const interQuantileRange = q3 - q1\n      const min = Math.min(maxAll, q3 + interQuantileRange * 1.5)\n      const max = Math.max(minAll, q1 - interQuantileRange * 1.5)\n      const x = index * datasetWidth + datasetWidth / 2\n       svg\n        .append('line')\n        .attr('x1', x)\n        .attr('x2', x)\n        .attr('y1', y(min))\n        .attr('y2', y(max))\n        .attr('stroke', 'black')\n       svg\n        .append('rect')\n        .attr('x', x - boxWidth / 2)\n        .attr('y', y(q3))\n        .attr('height', y(q1) - y(q3))\n        .attr('width', boxWidth)\n        .attr('stroke', 'black')\n        .style('fill', '#69b3a2')\n       svg\n        .selectAll('line.toto')\n        .data([min, median, max])\n        .enter()\n        .append('line')\n        .attr('x1', x - boxWidth / 2)\n        .attr('x2', x + boxWidth / 2)\n        .attr('y1', (d) => y(d))\n        .attr('y2', (d) => y(d))\n        .attr('stroke', 'black')\n       svg\n        .append('text')\n        .attr('x', x)\n        .attr('y', height + marginBottom / 2)\n        .attr('text-anchor', 'middle')\n        .text(dataset.label)\n        .style('font-size', '12px')\n        .attr('fill', 'black')\n    })\n     svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(y))*/\n  }, [data]);\n\n  //return <svg ref={svgRef} style={{ width: '100%', height: '100%' }} />\n};\n_s(BoxPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = BoxPlot;\nexport default BoxPlot;\nvar _c;\n$RefreshReg$(_c, \"BoxPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","BoxPlot","data","_s","svgRef","select","current","selectAll","remove","length","width","height","marginTop","marginRight","marginBottom","marginLeft","n","bins","bin","thresholds","value","d","label","map","sort","a","b","values","min","max","q1","quantile","q2","q3","iqr","r0","Math","r1","quartiles","range","outliers","filter","v","x","scaleLinear","domain","x0","x1","rangeRound","y","nice","svg","create","attr","g","append","join","random","price","call","axisBottom","ticks","tickSizeOuter","axisLeft","node","_c","$RefreshReg$"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/components/charts/BoxPlot.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport * as d3 from 'd3'\n\nconst BoxPlot = ({ data }) => {\n  const svgRef = useRef()\n\n  useEffect(() => {\n    d3.select(svgRef.current).selectAll('*').remove()\n\n    if (!data || data.length === 0) {\n      return\n    }\n\n    const width = 928\n    const height = 600\n    const marginTop = 20\n    const marginRight = 20\n    const marginBottom = 30\n    const marginLeft = 40\n\n    // Bin the data and derive the values (inter-quartile range, outliers…) for each bin.\n    const n = width / 40\n    const bins = d3\n      .bin()\n      .thresholds(n)\n      .value((d) => d.label)(data)\n      .map((bin) => {\n        bin.sort((a, b) => a.values - b.values)\n        const values = bin.map((d) => d.values)\n        const min = values[0]\n        const max = values[values.length - 1]\n        const q1 = d3.quantile(values, 0.25)\n        const q2 = d3.quantile(values, 0.5)\n        const q3 = d3.quantile(values, 0.75)\n        const iqr = q3 - q1 // interquartile range\n        const r0 = Math.max(min, q1 - iqr * 1.5)\n        const r1 = Math.min(max, q3 + iqr * 1.5)\n        bin.quartiles = [q1, q2, q3]\n        bin.range = [r0, r1]\n        bin.outliers = bin.filter((v) => v.values < r0 || v.values > r1)\n        return bin\n      })\n\n    // Prepare the positional scales.\n    const x = d3\n      .scaleLinear()\n      .domain([d3.min(bins, (d) => d.x0), d3.max(bins, (d) => d.x1)])\n      .rangeRound([marginLeft, width - marginRight])\n    const y = d3\n      .scaleLinear()\n      .domain([\n        d3.min(bins, (d) => d.range[0]),\n        d3.max(bins, (d) => d.range[1]),\n      ])\n      .nice()\n      .range([height - marginBottom, marginTop])\n\n    // Create the SVG container.\n    const svg = d3\n      .create('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', [0, 0, width, height])\n      .attr('style', 'max-width: 100%; height: auto; font: 10px sans-serif;')\n      .attr('text-anchor', 'middle')\n\n    // Create a visual representation for each bin.\n    const g = svg.append('g').selectAll('g').data(bins).join('g')\n\n    // Range.\n    g.append('path')\n      .attr('stroke', 'currentColor')\n      .attr(\n        'd',\n        (d) => `\n        M${x((d.x0 + d.x1) / 2)},${y(d.range[1])}\n        V${y(d.range[0])}\n      `\n      )\n\n    // Quartiles.\n    g.append('path')\n      .attr('fill', '#ddd')\n      .attr(\n        'd',\n        (d) => `\n        M${x(d.x0) + 1},${y(d.quartiles[2])}\n        H${x(d.x1)}\n        V${y(d.quartiles[0])}\n        H${x(d.x0) + 1}\n        Z\n      `\n      )\n\n    // Median.\n    g.append('path')\n      .attr('stroke', 'currentColor')\n      .attr('stroke-width', 2)\n      .attr(\n        'd',\n        (d) => `\n        M${x(d.x0) + 1},${y(d.quartiles[1])}\n        H${x(d.x1)}\n      `\n      )\n\n    // Outliers, with a bit of jitter.\n    g.append('g')\n      .attr('fill', 'currentColor')\n      .attr('fill-opacity', 0.2)\n      .attr('stroke', 'none')\n      .attr('transform', (d) => `translate(${x((d.x0 + d.x1) / 2)},0)`)\n      .selectAll('circle')\n      .data((d) => d.outliers)\n      .join('circle')\n      .attr('r', 2)\n      .attr('cx', () => (Math.random() - 0.5) * 4)\n      .attr('cy', (d) => y(d.price))\n\n    // Append the x axis.\n    svg\n      .append('g')\n      .attr('transform', `translate(0,${height - marginBottom})`)\n      .call(d3.axisBottom(x).ticks(n).tickSizeOuter(0))\n\n    // Append the y axis.\n    svg\n      .append('g')\n      .attr('transform', `translate(${marginLeft},0)`)\n      .call(d3.axisLeft(y).ticks(null, 's'))\n      .call((g) => g.select('.domain').remove())\n\n    return svg.node()\n\n    /* const boxWidth = 70\n    const minBoxSpacing = 30\n    const totalWidth = (boxWidth + minBoxSpacing) * data.length\n\n    const minValues = data.map((dataset) => d3.min(dataset.values))\n    const maxValues = data.map((dataset) => d3.max(dataset.values))\n    const minAll = d3.min(minValues) - 2\n    const maxAll = d3.max(maxValues) + 2\n\n    const y = d3.scaleLinear().domain([minAll, maxAll]).range([height, 0])\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr('width', '100%')\n      .attr('height', '100%')\n      .attr(\n        'viewBox',\n        `0 0 ${totalWidth + marginLeft + marginRight} ${height + marginTop + marginBottom}`\n      )\n      .style('font', '10px sans-serif')\n\n    const g = svg\n      .append('g')\n      .attr('transform', `translate(${marginLeft},${marginTop})`)\n\n    const datasetWidth = totalWidth / data.length\n\n    data.forEach((dataset, index) => {\n      const data_sorted = dataset.values.sort(d3.ascending)\n      const q1 = d3.quantile(data_sorted, 0.25)\n      const median = d3.quantile(data_sorted, 0.5)\n      const q3 = d3.quantile(data_sorted, 0.75)\n      const interQuantileRange = q3 - q1\n      const min = Math.min(maxAll, q3 + interQuantileRange * 1.5)\n      const max = Math.max(minAll, q1 - interQuantileRange * 1.5)\n      const x = index * datasetWidth + datasetWidth / 2\n\n      svg\n        .append('line')\n        .attr('x1', x)\n        .attr('x2', x)\n        .attr('y1', y(min))\n        .attr('y2', y(max))\n        .attr('stroke', 'black')\n\n      svg\n        .append('rect')\n        .attr('x', x - boxWidth / 2)\n        .attr('y', y(q3))\n        .attr('height', y(q1) - y(q3))\n        .attr('width', boxWidth)\n        .attr('stroke', 'black')\n        .style('fill', '#69b3a2')\n\n      svg\n        .selectAll('line.toto')\n        .data([min, median, max])\n        .enter()\n        .append('line')\n        .attr('x1', x - boxWidth / 2)\n        .attr('x2', x + boxWidth / 2)\n        .attr('y1', (d) => y(d))\n        .attr('y2', (d) => y(d))\n        .attr('stroke', 'black')\n\n      svg\n        .append('text')\n        .attr('x', x)\n        .attr('y', height + marginBottom / 2)\n        .attr('text-anchor', 'middle')\n        .text(dataset.label)\n        .style('font-size', '12px')\n        .attr('fill', 'black')\n    })\n\n    svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(y))*/\n  }, [data])\n\n  //return <svg ref={svgRef} style={{ width: '100%', height: '100%' }} />\n}\n\nexport default BoxPlot\n"],"mappings":"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AAI,CAAC3D,EAAE,CAAC+D,QAAQ,CAACd,CAAC,CAAC,CAACY,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CACrCF,IAAI,CAAEL,CAAC,IAAKA,CAAC,CAACjD,MAAM,CAAC,SAAS,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC;IAE5C,OAAO2C,GAAG,CAACa,IAAI,CAAC,CAAC;;IAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAYE,CAAC,EAAE,CAAC9D,IAAI,CAAC,CAAC;;EAEV;AACF,CAAC;AAAAC,EAAA,CAlNKF,OAAO;AAAAgE,EAAA,GAAPhE,OAAO;AAoNb,eAAeA,OAAO;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}