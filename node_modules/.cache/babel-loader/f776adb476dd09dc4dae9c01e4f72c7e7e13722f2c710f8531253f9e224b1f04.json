{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromBindExpression;\n/**\n * Extractor function for a BindExpression type value node.\n * A bind expression looks like `::this.foo`\n * This will return `this.foo.bind(this)` as the value to indicate its existence,\n * since we can not execute the function this.foo.bind(this) in a static environment.\n *\n * @param - value - AST Value object with type `BindExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromBindExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var callee = getValue(value.callee);\n\n  // If value.object === null, the callee must be a MemberExpression.\n  // https://github.com/babel/babylon/blob/master/ast/spec.md#bindexpression\n  var object = value.object === null ? getValue(value.callee.object) : getValue(value.object);\n  if (value.object && value.object.property) {\n    return object + '.' + callee + '.bind(' + object + ')';\n  }\n  return callee + '.bind(' + object + ')';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","extractValueFromBindExpression","getValue","require","callee","object","property"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/node_modules/jsx-ast-utils/lib/values/expressions/BindExpression.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromBindExpression;\n/**\n * Extractor function for a BindExpression type value node.\n * A bind expression looks like `::this.foo`\n * This will return `this.foo.bind(this)` as the value to indicate its existence,\n * since we can not execute the function this.foo.bind(this) in a static environment.\n *\n * @param - value - AST Value object with type `BindExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromBindExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var callee = getValue(value.callee);\n\n  // If value.object === null, the callee must be a MemberExpression.\n  // https://github.com/babel/babylon/blob/master/ast/spec.md#bindexpression\n  var object = value.object === null ? getValue(value.callee.object) : getValue(value.object);\n\n  if (value.object && value.object.property) {\n    return object + '.' + callee + '.bind(' + object + ')';\n  }\n\n  return callee + '.bind(' + object + ')';\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,8BAA8BA,CAACF,KAAK,EAAE;EAC7C;EACA,IAAIG,QAAQ,GAAGC,OAAO,CAAC,GAAG,CAAC,CAACH,OAAO;EACnC,IAAII,MAAM,GAAGF,QAAQ,CAACH,KAAK,CAACK,MAAM,CAAC;;EAEnC;EACA;EACA,IAAIC,MAAM,GAAGN,KAAK,CAACM,MAAM,KAAK,IAAI,GAAGH,QAAQ,CAACH,KAAK,CAACK,MAAM,CAACC,MAAM,CAAC,GAAGH,QAAQ,CAACH,KAAK,CAACM,MAAM,CAAC;EAE3F,IAAIN,KAAK,CAACM,MAAM,IAAIN,KAAK,CAACM,MAAM,CAACC,QAAQ,EAAE;IACzC,OAAOD,MAAM,GAAG,GAAG,GAAGD,MAAM,GAAG,QAAQ,GAAGC,MAAM,GAAG,GAAG;EACxD;EAEA,OAAOD,MAAM,GAAG,QAAQ,GAAGC,MAAM,GAAG,GAAG;AACzC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}