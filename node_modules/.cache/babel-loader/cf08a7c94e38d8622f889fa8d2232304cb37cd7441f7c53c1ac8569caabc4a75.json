{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport fetchStaticDataFromAPI from './api/StaticData';\nimport KafkaDataReceiver from './api/OnlineData';\nimport './App.css';\nimport BarChart from './components/charts/BarChart';\nimport ScatterPlot from './components/charts/ScatterPlot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [onlineData, setOnlineData] = useState([]);\n  const [realCount, setRealCount] = useState([]);\n  console.log('Static Data: ', staticData);\n  useEffect(() => {\n    const onDataReceived = receivedData => {\n      setOnlineData(receivedData);\n    };\n    KafkaDataReceiver(onDataReceived);\n  }, []);\n  console.log('Online Data: ', onlineData);\n  const countRealTimeEvents = data => {\n    const eventCounts = {};\n\n    // Verifica se os dados recebidos são um objeto\n    if (typeof data === 'object' && data.data) {\n      const event = JSON.parse(data.data); // Converte a string JSON para objeto JavaScript\n      const eventType = event.EventType;\n\n      // Incrementa o contador do tipo de evento\n      if (eventType in eventCounts) {\n        eventCounts[eventType]++;\n      } else {\n        eventCounts[eventType] = 1;\n      }\n    }\n    return eventCounts;\n  };\n  useEffect(() => {\n    const onDataReceived = receivedData => {\n      const realEventCounts = countRealTimeEvents(receivedData);\n      setRealCount(realEventCounts);\n      console.log('Event counts:', realEventCounts);\n    };\n    KafkaDataReceiver(onDataReceived);\n  }, []);\n  const convertDataForScatterPlot = time => {\n    const convertedData = [];\n    for (const eventType in time) {\n      const durations = time[eventType];\n      const averageDuration = durations.reduce((acc, curr) => acc + curr, 0) / durations.length;\n\n      // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n      const xCoordinate = eventType;\n\n      // Usar a média das durações como coordenada y\n      const yCoordinate = averageDuration;\n\n      // Adicionar o ponto ao array convertido\n      convertedData.push({\n        x: xCoordinate,\n        y: yCoordinate\n      });\n    }\n    return convertedData;\n  };\n  const eventDataCounts = countEvents(staticData);\n  const eventDurations = calculateEventDurations(staticData);\n  const scatterPlotData = convertDataForScatterPlot(eventDurations);\n  const eventStaticDataForChart = Object.entries(eventDataCounts).map(([eventType, count]) => ({\n    name: eventType,\n    value: count\n  }));\n  const eventOnlineDataForChart = Object.entries(realCount).map(([eventType, count]) => ({\n    name: eventType,\n    value: count\n  }));\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        data: eventStaticDataForChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Scatter Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScatterPlot, {\n        data: scatterPlotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        data: eventOnlineDataForChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Scatter Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Li6kFV3Niaa6m0LMQn4EGJCIvTk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchStaticDataFromAPI","KafkaDataReceiver","BarChart","ScatterPlot","jsxDEV","_jsxDEV","App","_s","onlineData","setOnlineData","realCount","setRealCount","console","log","staticData","onDataReceived","receivedData","countRealTimeEvents","data","eventCounts","event","JSON","parse","eventType","EventType","realEventCounts","convertDataForScatterPlot","time","convertedData","durations","averageDuration","reduce","acc","curr","length","xCoordinate","yCoordinate","push","x","y","eventDataCounts","countEvents","eventDurations","calculateEventDurations","scatterPlotData","eventStaticDataForChart","Object","entries","map","count","name","value","eventOnlineDataForChart","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport fetchStaticDataFromAPI from './api/StaticData'\nimport KafkaDataReceiver from './api/OnlineData'\n\nimport './App.css'\nimport BarChart from './components/charts/BarChart'\nimport ScatterPlot from './components/charts/ScatterPlot'\n\nfunction App() {\n  const [onlineData, setOnlineData] = useState([])\n  const [realCount, setRealCount] = useState([])\n\n  console.log('Static Data: ', staticData)\n\n  useEffect(() => {\n    const onDataReceived = (receivedData) => {\n      setOnlineData(receivedData)\n    }\n\n    KafkaDataReceiver(onDataReceived)\n  }, [])\n\n  console.log('Online Data: ', onlineData)\n\n  const countRealTimeEvents = (data) => {\n    const eventCounts = {}\n\n    // Verifica se os dados recebidos são um objeto\n    if (typeof data === 'object' && data.data) {\n      const event = JSON.parse(data.data) // Converte a string JSON para objeto JavaScript\n      const eventType = event.EventType\n\n      // Incrementa o contador do tipo de evento\n      if (eventType in eventCounts) {\n        eventCounts[eventType]++\n      } else {\n        eventCounts[eventType] = 1\n      }\n    }\n\n    return eventCounts\n  }\n\n  useEffect(() => {\n    const onDataReceived = (receivedData) => {\n      const realEventCounts = countRealTimeEvents(receivedData)\n      setRealCount(realEventCounts)\n      console.log('Event counts:', realEventCounts)\n    }\n\n    KafkaDataReceiver(onDataReceived)\n  }, [])\n\n  const convertDataForScatterPlot = (time) => {\n    const convertedData = []\n\n    for (const eventType in time) {\n      const durations = time[eventType]\n      const averageDuration =\n        durations.reduce((acc, curr) => acc + curr, 0) / durations.length\n\n      // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n      const xCoordinate = eventType\n\n      // Usar a média das durações como coordenada y\n      const yCoordinate = averageDuration\n\n      // Adicionar o ponto ao array convertido\n      convertedData.push({ x: xCoordinate, y: yCoordinate })\n    }\n\n    return convertedData\n  }\n\n  const eventDataCounts = countEvents(staticData)\n  const eventDurations = calculateEventDurations(staticData)\n  const scatterPlotData = convertDataForScatterPlot(eventDurations)\n\n  const eventStaticDataForChart = Object.entries(eventDataCounts).map(\n    ([eventType, count]) => ({\n      name: eventType,\n      value: count,\n    })\n  )\n\n  const eventOnlineDataForChart = Object.entries(realCount).map(\n    ([eventType, count]) => ({\n      name: eventType,\n      value: count,\n    })\n  )\n\n  return (\n    <React.Fragment>\n      <div>\n        <h1>Bar Chart</h1>\n        <BarChart data={eventStaticDataForChart} />\n      </div>\n      <div>\n        <h1>Scatter Plot</h1>\n        <ScatterPlot data={scatterPlotData} />\n      </div>\n      <h1>Real Time</h1>\n      <div>\n        <h1>Bar Chart</h1>\n        <BarChart data={eventOnlineDataForChart} />\n      </div>\n      <div>\n        <h1>Scatter Plot</h1>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}