{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromChainExpression;\n/**\n * Extractor function for a ChainExpression type value node.\n * A member expression is accessing a property on an object `obj.property`.\n *\n * @param - value - AST Value object with type `ChainExpression`\n * @returns - The extracted value converted to correct type\n *  and maintaing `obj?.property` convention.\n */\nfunction extractValueFromChainExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  return getValue(value.expression || value);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","extractValueFromChainExpression","getValue","require","expression"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/node_modules/jsx-ast-utils/lib/values/expressions/ChainExpression.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromChainExpression;\n/**\n * Extractor function for a ChainExpression type value node.\n * A member expression is accessing a property on an object `obj.property`.\n *\n * @param - value - AST Value object with type `ChainExpression`\n * @returns - The extracted value converted to correct type\n *  and maintaing `obj?.property` convention.\n */\nfunction extractValueFromChainExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  return getValue(value.expression || value);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,+BAA+B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,+BAA+BA,CAACF,KAAK,EAAE;EAC9C;EACA,IAAIG,QAAQ,GAAGC,OAAO,CAAC,GAAG,CAAC,CAACH,OAAO;EACnC,OAAOE,QAAQ,CAACH,KAAK,CAACK,UAAU,IAAIL,KAAK,CAAC;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}