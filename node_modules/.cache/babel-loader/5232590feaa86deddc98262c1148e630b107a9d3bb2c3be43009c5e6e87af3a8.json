{"ast":null,"code":"const transformDataToSankeyChart = data => {\n  const nodesSet = new Set();\n  const links = [];\n\n  // Iterar sobre cada grupo de eventos\n  for (const key in data) {\n    const events = data[key];\n    for (const event of events) {\n      const {\n        Source,\n        Target,\n        Start,\n        End,\n        Type\n      } = event;\n\n      // Adicionar nodes ao conjunto\n      nodesSet.add(Source);\n      nodesSet.add(Target);\n\n      // Calcular a duração\n      const duration = calculateDuration(Start, End);\n\n      // Adicionar link\n      links.push({\n        source: Source,\n        target: Target,\n        value: duration\n      });\n    }\n  }\n\n  // Criar a lista de nós a partir do conjunto\n  const nodes = Array.from(nodesSet).map(name => {\n    return {\n      name,\n      category: data[name] ? data[name][0].Type : 'default' // Definindo a categoria\n    };\n  });\n\n  // Criar um índice para os nós\n  const nodesIndex = {};\n  nodes.forEach((node, index) => {\n    nodesIndex[node.name] = index;\n  });\n\n  // Formatar links com os índices corretos\n  const formattedLinks = links.map(link => ({\n    source: nodesIndex[link.source],\n    target: nodesIndex[link.target],\n    value: link.value\n  }));\n  return {\n    nodes,\n    links: formattedLinks\n  };\n};\n\n// Função para calcular a duração\nconst calculateDuration = (start, end) => {\n  const startDate = new Date(start);\n  const endDate = new Date(end);\n  return (endDate - startDate) / 1000; // Duração em segundos\n};\nexport default transformDataToSankeyChart;","map":{"version":3,"names":["transformDataToSankeyChart","data","nodesSet","Set","links","key","events","event","Source","Target","Start","End","Type","add","duration","calculateDuration","push","source","target","value","nodes","Array","from","map","name","category","nodesIndex","forEach","node","index","formattedLinks","link","start","end","startDate","Date","endDate"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/TransformDate/transformDataToSankeyChart.js"],"sourcesContent":["const transformDataToSankeyChart = (data) => {\n  const nodesSet = new Set()\n  const links = []\n\n  // Iterar sobre cada grupo de eventos\n  for (const key in data) {\n    const events = data[key]\n    for (const event of events) {\n      const { Source, Target, Start, End, Type } = event\n\n      // Adicionar nodes ao conjunto\n      nodesSet.add(Source)\n      nodesSet.add(Target)\n\n      // Calcular a duração\n      const duration = calculateDuration(Start, End)\n\n      // Adicionar link\n      links.push({\n        source: Source,\n        target: Target,\n        value: duration,\n      })\n    }\n  }\n\n  // Criar a lista de nós a partir do conjunto\n  const nodes = Array.from(nodesSet).map((name) => {\n    return {\n      name,\n      category: data[name] ? data[name][0].Type : 'default', // Definindo a categoria\n    }\n  })\n\n  // Criar um índice para os nós\n  const nodesIndex = {}\n  nodes.forEach((node, index) => {\n    nodesIndex[node.name] = index\n  })\n\n  // Formatar links com os índices corretos\n  const formattedLinks = links.map((link) => ({\n    source: nodesIndex[link.source],\n    target: nodesIndex[link.target],\n    value: link.value,\n  }))\n\n  return {\n    nodes,\n    links: formattedLinks,\n  }\n}\n\n// Função para calcular a duração\nconst calculateDuration = (start, end) => {\n  const startDate = new Date(start)\n  const endDate = new Date(end)\n  return (endDate - startDate) / 1000 // Duração em segundos\n}\n\nexport default transformDataToSankeyChart\n"],"mappings":"AAAA,MAAMA,0BAA0B,GAAIC,IAAI,IAAK;EAC3C,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC1B,MAAMC,KAAK,GAAG,EAAE;;EAEhB;EACA,KAAK,MAAMC,GAAG,IAAIJ,IAAI,EAAE;IACtB,MAAMK,MAAM,GAAGL,IAAI,CAACI,GAAG,CAAC;IACxB,KAAK,MAAME,KAAK,IAAID,MAAM,EAAE;MAC1B,MAAM;QAAEE,MAAM;QAAEC,MAAM;QAAEC,KAAK;QAAEC,GAAG;QAAEC;MAAK,CAAC,GAAGL,KAAK;;MAElD;MACAL,QAAQ,CAACW,GAAG,CAACL,MAAM,CAAC;MACpBN,QAAQ,CAACW,GAAG,CAACJ,MAAM,CAAC;;MAEpB;MACA,MAAMK,QAAQ,GAAGC,iBAAiB,CAACL,KAAK,EAAEC,GAAG,CAAC;;MAE9C;MACAP,KAAK,CAACY,IAAI,CAAC;QACTC,MAAM,EAAET,MAAM;QACdU,MAAM,EAAET,MAAM;QACdU,KAAK,EAAEL;MACT,CAAC,CAAC;IACJ;EACF;;EAEA;EACA,MAAMM,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACpB,QAAQ,CAAC,CAACqB,GAAG,CAAEC,IAAI,IAAK;IAC/C,OAAO;MACLA,IAAI;MACJC,QAAQ,EAAExB,IAAI,CAACuB,IAAI,CAAC,GAAGvB,IAAI,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC,CAACZ,IAAI,GAAG,SAAS,CAAE;IACzD,CAAC;EACH,CAAC,CAAC;;EAEF;EACA,MAAMc,UAAU,GAAG,CAAC,CAAC;EACrBN,KAAK,CAACO,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7BH,UAAU,CAACE,IAAI,CAACJ,IAAI,CAAC,GAAGK,KAAK;EAC/B,CAAC,CAAC;;EAEF;EACA,MAAMC,cAAc,GAAG1B,KAAK,CAACmB,GAAG,CAAEQ,IAAI,KAAM;IAC1Cd,MAAM,EAAES,UAAU,CAACK,IAAI,CAACd,MAAM,CAAC;IAC/BC,MAAM,EAAEQ,UAAU,CAACK,IAAI,CAACb,MAAM,CAAC;IAC/BC,KAAK,EAAEY,IAAI,CAACZ;EACd,CAAC,CAAC,CAAC;EAEH,OAAO;IACLC,KAAK;IACLhB,KAAK,EAAE0B;EACT,CAAC;AACH,CAAC;;AAED;AACA,MAAMf,iBAAiB,GAAGA,CAACiB,KAAK,EAAEC,GAAG,KAAK;EACxC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACH,KAAK,CAAC;EACjC,MAAMI,OAAO,GAAG,IAAID,IAAI,CAACF,GAAG,CAAC;EAC7B,OAAO,CAACG,OAAO,GAAGF,SAAS,IAAI,IAAI,EAAC;AACtC,CAAC;AAED,eAAelC,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}