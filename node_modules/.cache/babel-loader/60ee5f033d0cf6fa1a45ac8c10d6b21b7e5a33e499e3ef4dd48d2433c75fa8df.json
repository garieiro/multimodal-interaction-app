{"ast":null,"code":"var _jsxFileName = \"/Users/goncaloarieiro/thesis/multimodal-interaction/src/components/buildCharts/timeLineChart/StaticTimeLine.js\",\n  _s = $RefreshSig$();\nimport TimelineChart from '../../charts/TimeLineChart';\nimport React, { useEffect, useState } from 'react';\nimport { fetchStaticTimeLineFromAPI } from '../../../api/StaticData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StaticTimeLine = ({\n  onDataReceived,\n  onWordDataReceived,\n  data,\n  onExpDataReceived,\n  onExpLabelReceived\n}) => {\n  _s();\n  const [timesData, setTimesData] = useState([]);\n  const [initialData, setInitialData] = useState([]);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [eventColor, setEventColor] = useState({});\n  useEffect(() => {\n    const fetchTimeLine = async () => {\n      try {\n        let fetchTimeLineData = [];\n        if (data) {\n          fetchTimeLineData = data;\n        } else {\n          fetchTimeLineData = await fetchStaticTimeLineFromAPI();\n          setInitialData(fetchTimeLineData);\n        }\n        setTimesData(fetchTimeLineData);\n        setDataLoaded(true);\n      } catch (error) {\n        console.error('Error fetching TimeLine data:', error);\n      }\n    };\n    fetchTimeLine().catch(error => console.error('Error fetching TimeLine data:', error));\n  }, [data, onEventTypeColor]);\n  console.log('Color:', onEventTypeColor);\n  const handleLabelClick = async label => {\n    const experienceIdMatch = label.match(/\\d+/);\n    const experienceId = experienceIdMatch ? experienceIdMatch[0] : null;\n    if (experienceId) {\n      const fetchedData = await fetchStaticTimeLineFromAPI(experienceId);\n      console.log('Aqui', fetchedData);\n      setTimesData(fetchedData);\n      onExpLabelReceived(label);\n      setDataLoaded(true);\n    } else {\n      console.error('Erro: Não foi possível extrair o ID da experiência da label:', label);\n    }\n  };\n  const resetToInitialData = () => {\n    setTimesData(initialData);\n    onEventTypeColor({});\n    console.log('lalal:', timesData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetToInitialData,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), dataLoaded && /*#__PURE__*/_jsxDEV(TimelineChart, {\n      data: timesData,\n      eventColor: '',\n      handleLabelClick: handleLabelClick,\n      onDataReceived: onDataReceived,\n      onExpDataReceived: onExpDataReceived,\n      onWordDataReceived: onWordDataReceived\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(StaticTimeLine, \"yYIM2JHjOk1MmkMY75tAWundZKE=\");\n_c = StaticTimeLine;\nexport default StaticTimeLine;\nvar _c;\n$RefreshReg$(_c, \"StaticTimeLine\");","map":{"version":3,"names":["TimelineChart","React","useEffect","useState","fetchStaticTimeLineFromAPI","jsxDEV","_jsxDEV","StaticTimeLine","onDataReceived","onWordDataReceived","data","onExpDataReceived","onExpLabelReceived","_s","timesData","setTimesData","initialData","setInitialData","dataLoaded","setDataLoaded","eventColor","setEventColor","fetchTimeLine","fetchTimeLineData","error","console","catch","onEventTypeColor","log","handleLabelClick","label","experienceIdMatch","match","experienceId","fetchedData","resetToInitialData","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction/src/components/buildCharts/timeLineChart/StaticTimeLine.js"],"sourcesContent":["import TimelineChart from '../../charts/TimeLineChart'\nimport React, { useEffect, useState } from 'react'\nimport { fetchStaticTimeLineFromAPI } from '../../../api/StaticData'\n\nconst StaticTimeLine = ({\n  onDataReceived,\n  onWordDataReceived,\n  data,\n  onExpDataReceived,\n  onExpLabelReceived,\n}) => {\n  const [timesData, setTimesData] = useState([])\n  const [initialData, setInitialData] = useState([])\n  const [dataLoaded, setDataLoaded] = useState(false)\n  const [eventColor, setEventColor] = useState({})\n\n  useEffect(() => {\n    const fetchTimeLine = async () => {\n      try {\n        let fetchTimeLineData = []\n        if (data) {\n          fetchTimeLineData = data\n        } else {\n          fetchTimeLineData = await fetchStaticTimeLineFromAPI()\n          setInitialData(fetchTimeLineData)\n        }\n        setTimesData(fetchTimeLineData)\n        setDataLoaded(true)\n      } catch (error) {\n        console.error('Error fetching TimeLine data:', error)\n      }\n    }\n    fetchTimeLine().catch((error) =>\n      console.error('Error fetching TimeLine data:', error)\n    )\n  }, [data, onEventTypeColor])\n\n  console.log('Color:', onEventTypeColor)\n\n  const handleLabelClick = async (label) => {\n    const experienceIdMatch = label.match(/\\d+/)\n    const experienceId = experienceIdMatch ? experienceIdMatch[0] : null\n\n    if (experienceId) {\n      const fetchedData = await fetchStaticTimeLineFromAPI(experienceId)\n      console.log('Aqui', fetchedData)\n      setTimesData(fetchedData)\n      onExpLabelReceived(label)\n      setDataLoaded(true)\n    } else {\n      console.error(\n        'Erro: Não foi possível extrair o ID da experiência da label:',\n        label\n      )\n    }\n  }\n\n  const resetToInitialData = () => {\n    setTimesData(initialData)\n    onEventTypeColor({})\n    console.log('lalal:', timesData)\n  }\n\n  return (\n    <div>\n      <button onClick={resetToInitialData}>Back</button>\n      {dataLoaded && (\n        <TimelineChart\n          data={timesData}\n          eventColor={''}\n          handleLabelClick={handleLabelClick}\n          onDataReceived={onDataReceived}\n          onExpDataReceived={onExpDataReceived}\n          onWordDataReceived={onWordDataReceived}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default StaticTimeLine\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}