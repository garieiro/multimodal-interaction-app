{"ast":null,"code":"var _jsxFileName = \"/Users/goncaloarieiro/thesis/multimodal-interaction/src/components/buildCharts/timeLineChart/StaticTimeLine.js\",\n  _s = $RefreshSig$();\nimport TimelineChart from '../../charts/TimeLineChart';\nimport React, { useEffect, useState } from 'react';\nimport { fetchBoxPlotFromAPI, fetchStaticTimeLineFromAPI } from '../../../api/StaticData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StaticTimeLine = ({\n  onDataReceived,\n  onWordDataReceived,\n  data\n}) => {\n  _s();\n  const [timesData, setTimesData] = useState([]);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [lineColor, setLineColor] = useState('rgba(75, 192, 192, 1)');\n  useEffect(() => {\n    const fetchTimeLine = async () => {\n      try {\n        let fetchTimeLineData = [];\n        if (data) {\n          fetchTimeLineData = data;\n        } else {\n          fetchTimeLineData = await fetchStaticTimeLineFromAPI();\n        }\n        setTimesData(fetchTimeLineData);\n        setDataLoaded(true);\n      } catch (error) {\n        console.error('Error fetching TimeLine data:', error);\n      }\n    };\n    fetchTimeLine().catch(error => console.error('Error fetching TimeLine data:', error));\n  }, [data]);\n  const handleLabelClick = async label => {\n    const experienceId = label.split(' ')[0];\n    const fetchedData = await fetchStaticTimeLineFromAPI(experienceId);\n    setTimesData(fetchedData);\n    setDataLoaded(true);\n  };\n  const handleLabelClickWithColor = expName => {\n    // Define a cor com base no expName\n    const color = expName.includes('input') ? 'rgba(75, 192, 192, 1)' : 'rgba(105, 105, 105, 1)';\n    setLineColor(color);\n    handleLabelClick(expName);\n  };\n  return dataLoaded && /*#__PURE__*/_jsxDEV(TimelineChart, {\n    data: timesData,\n    handleLabelClick: handleLabelClickWithColor,\n    onDataReceived: onDataReceived,\n    onWordDataReceived: onWordDataReceived\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n};\n_s(StaticTimeLine, \"DTXft+bY+WFF+UUt/c+Y0lGL6TI=\");\n_c = StaticTimeLine;\nexport default StaticTimeLine;\nvar _c;\n$RefreshReg$(_c, \"StaticTimeLine\");","map":{"version":3,"names":["TimelineChart","React","useEffect","useState","fetchBoxPlotFromAPI","fetchStaticTimeLineFromAPI","jsxDEV","_jsxDEV","StaticTimeLine","onDataReceived","onWordDataReceived","data","_s","timesData","setTimesData","dataLoaded","setDataLoaded","lineColor","setLineColor","fetchTimeLine","fetchTimeLineData","error","console","catch","handleLabelClick","label","experienceId","split","fetchedData","handleLabelClickWithColor","expName","color","includes","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction/src/components/buildCharts/timeLineChart/StaticTimeLine.js"],"sourcesContent":["import TimelineChart from '../../charts/TimeLineChart'\nimport React, { useEffect, useState } from 'react'\nimport {\n  fetchBoxPlotFromAPI,\n  fetchStaticTimeLineFromAPI,\n} from '../../../api/StaticData'\n\nconst StaticTimeLine = ({ onDataReceived, onWordDataReceived, data }) => {\n  const [timesData, setTimesData] = useState([])\n  const [dataLoaded, setDataLoaded] = useState(false)\n  const [lineColor, setLineColor] = useState('rgba(75, 192, 192, 1)')\n\n  useEffect(() => {\n    const fetchTimeLine = async () => {\n      try {\n        let fetchTimeLineData = []\n        if (data) {\n          fetchTimeLineData = data\n        } else {\n          fetchTimeLineData = await fetchStaticTimeLineFromAPI()\n        }\n        setTimesData(fetchTimeLineData)\n        setDataLoaded(true)\n      } catch (error) {\n        console.error('Error fetching TimeLine data:', error)\n      }\n    }\n\n    fetchTimeLine().catch((error) =>\n      console.error('Error fetching TimeLine data:', error)\n    )\n  }, [data])\n\n  const handleLabelClick = async (label) => {\n    const experienceId = label.split(' ')[0]\n    const fetchedData = await fetchStaticTimeLineFromAPI(experienceId)\n    setTimesData(fetchedData)\n    setDataLoaded(true)\n  }\n\n  const handleLabelClickWithColor = (expName) => {\n    // Define a cor com base no expName\n    const color = expName.includes('input')\n      ? 'rgba(75, 192, 192, 1)'\n      : 'rgba(105, 105, 105, 1)'\n    setLineColor(color)\n    handleLabelClick(expName)\n  }\n\n  return (\n    dataLoaded && (\n      <TimelineChart\n        data={timesData}\n        handleLabelClick={handleLabelClickWithColor}\n        onDataReceived={onDataReceived}\n        onWordDataReceived={onWordDataReceived}\n      />\n    )\n  )\n}\n\nexport default StaticTimeLine\n"],"mappings":";;AAAA,OAAOA,aAAa,MAAM,4BAA4B;AACtD,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,mBAAmB,EACnBC,0BAA0B,QACrB,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,cAAc;EAAEC,kBAAkB;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,uBAAuB,CAAC;EAEnED,SAAS,CAAC,MAAM;IACd,MAAMiB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,IAAIC,iBAAiB,GAAG,EAAE;QAC1B,IAAIT,IAAI,EAAE;UACRS,iBAAiB,GAAGT,IAAI;QAC1B,CAAC,MAAM;UACLS,iBAAiB,GAAG,MAAMf,0BAA0B,CAAC,CAAC;QACxD;QACAS,YAAY,CAACM,iBAAiB,CAAC;QAC/BJ,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDF,aAAa,CAAC,CAAC,CAACI,KAAK,CAAEF,KAAK,IAC1BC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CACtD,CAAC;EACH,CAAC,EAAE,CAACV,IAAI,CAAC,CAAC;EAEV,MAAMa,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACxC,MAAMC,YAAY,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxC,MAAMC,WAAW,GAAG,MAAMvB,0BAA0B,CAACqB,YAAY,CAAC;IAClEZ,YAAY,CAACc,WAAW,CAAC;IACzBZ,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMa,yBAAyB,GAAIC,OAAO,IAAK;IAC7C;IACA,MAAMC,KAAK,GAAGD,OAAO,CAACE,QAAQ,CAAC,OAAO,CAAC,GACnC,uBAAuB,GACvB,wBAAwB;IAC5Bd,YAAY,CAACa,KAAK,CAAC;IACnBP,gBAAgB,CAACM,OAAO,CAAC;EAC3B,CAAC;EAED,OACEf,UAAU,iBACRR,OAAA,CAACP,aAAa;IACZW,IAAI,EAAEE,SAAU;IAChBW,gBAAgB,EAAEK,yBAA0B;IAC5CpB,cAAc,EAAEA,cAAe;IAC/BC,kBAAkB,EAAEA;EAAmB;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CACF;AAEL,CAAC;AAAAxB,EAAA,CApDKJ,cAAc;AAAA6B,EAAA,GAAd7B,cAAc;AAsDpB,eAAeA,cAAc;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}