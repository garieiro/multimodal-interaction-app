{"ast":null,"code":"var _jsxFileName = \"/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/components/mainPage/MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Alert, Button, Container, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, ListGroup, ListGroupItem, Modal, ModalBody, ModalFooter, ModalHeader, Tooltip } from 'reactstrap';\nimport { fetchStaticAllFilesFromAPI, fetchStaticFilteredDataFromAPI } from '../../api/StaticData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [dataset, setDataset] = useState([]);\n  const [saveDataset, setSaveDataset] = useState([]);\n  const [showUsersList, setShowUsersList] = useState(false);\n  const [allUsers, setAllUsers] = useState([]);\n  const [checkedUsers, setCheckedUsers] = useState([]);\n  const [filteredUsers, setFilteredUsers] = useState([]);\n  const [modal, setModal] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [showNoUsers, setShowNoUsers] = useState(false);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [tooltipOpen, setTooltipOpen] = useState({});\n  const [selectedDataset, setSelectedDataset] = useState(null); // Novo estado para armazenar o dataset selecionado\n\n  useEffect(() => {\n    const fetchDataset = async () => {\n      try {\n        const fetchedDataset = await fetchStaticAllFilesFromAPI();\n        setDataset(fetchedDataset);\n      } catch (error) {\n        console.error('Error fetching Dataset:', error);\n      }\n    };\n    fetchDataset().catch(error => console.error('Error fetching Dataset:', error));\n  }, []);\n  const formatDatasetName = filename => {\n    const nameWithoutExtension = filename.replace('.json', '');\n    return nameWithoutExtension.replace(/^dataset/i, 'Dataset').replace(/(\\d+)/, ' $1');\n  };\n  const handleDatasetClick = dataset => {\n    setSelectedDataset(dataset); // Armazena o dataset selecionado no estado\n  };\n  const tooltipData = file => [{\n    label: 'Name',\n    value: file.dataset !== null ? file.dataset : 'No dataset Name'\n  }, {\n    label: 'Number of Users',\n    value: file.users !== null ? file.users : '0'\n  }, {\n    label: 'Dataset Time',\n    value: file.total_duration !== null ? `${file.total_duration} s` : '0 s'\n  }, {\n    label: 'Number of Types',\n    value: file.type_counts ? file.type_counts : 'No data'\n  }, {\n    label: 'Number of Event Types',\n    value: file.event_type_counts ? file.event_type_counts : 'No data'\n  }];\n  const sortedDataset = dataset.sort((first, second) => first.dataset.localeCompare(second.dataset));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title-text\",\n        children: [\"Visualization and Analysis \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 38\n        }, this), \" of \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 48\n        }, this), \" Multimodal Interaction\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            children: sortedDataset.map((file, index) => /*#__PURE__*/_jsxDEV(ListGroupItem, {\n              action: true,\n              tag: \"button\",\n              onClick: () => handleDatasetClick(file) // Chama a função ao clicar no dataset\n              ,\n              children: [formatDatasetName(file.dataset), \" \"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: selectedDataset ?\n        /*#__PURE__*/\n        // Se houver um dataset selecionado, mostre as informações\n        _jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Dataset Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n            children: tooltipData(selectedDataset).map((info, index) => /*#__PURE__*/_jsxDEV(ListGroupItem, {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [info.label, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 21\n              }, this), \" \", info.value]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a dataset to view its details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this) // Texto padrão quando nenhum dataset foi selecionado\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Content for section 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"Ym/2fiBJkACwNxj8BR0U1hf+cH4=\", false, function () {\n  return [useNavigate];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Alert","Button","Container","Dropdown","DropdownItem","DropdownMenu","DropdownToggle","ListGroup","ListGroupItem","Modal","ModalBody","ModalFooter","ModalHeader","Tooltip","fetchStaticAllFilesFromAPI","fetchStaticFilteredDataFromAPI","jsxDEV","_jsxDEV","MainPage","_s","navigate","dataset","setDataset","saveDataset","setSaveDataset","showUsersList","setShowUsersList","allUsers","setAllUsers","checkedUsers","setCheckedUsers","filteredUsers","setFilteredUsers","modal","setModal","showToast","setShowToast","showNoUsers","setShowNoUsers","dropdownOpen","setDropdownOpen","tooltipOpen","setTooltipOpen","selectedDataset","setSelectedDataset","fetchDataset","fetchedDataset","error","console","catch","formatDatasetName","filename","nameWithoutExtension","replace","handleDatasetClick","tooltipData","file","label","value","users","total_duration","type_counts","event_type_counts","sortedDataset","sort","first","second","localeCompare","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","action","tag","onClick","info","_c","$RefreshReg$"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/components/mainPage/MainPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport {\n  Alert,\n  Button,\n  Container,\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  ListGroup,\n  ListGroupItem,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Tooltip,\n} from 'reactstrap'\nimport {\n  fetchStaticAllFilesFromAPI,\n  fetchStaticFilteredDataFromAPI,\n} from '../../api/StaticData'\n\nconst MainPage = () => {\n  const navigate = useNavigate()\n  const [dataset, setDataset] = useState([])\n  const [saveDataset, setSaveDataset] = useState([])\n  const [showUsersList, setShowUsersList] = useState(false)\n  const [allUsers, setAllUsers] = useState([])\n  const [checkedUsers, setCheckedUsers] = useState([])\n  const [filteredUsers, setFilteredUsers] = useState([])\n  const [modal, setModal] = useState(false)\n  const [showToast, setShowToast] = useState(false)\n  const [showNoUsers, setShowNoUsers] = useState(false)\n  const [dropdownOpen, setDropdownOpen] = useState(false)\n  const [tooltipOpen, setTooltipOpen] = useState({})\n  const [selectedDataset, setSelectedDataset] = useState(null) // Novo estado para armazenar o dataset selecionado\n\n  useEffect(() => {\n    const fetchDataset = async () => {\n      try {\n        const fetchedDataset = await fetchStaticAllFilesFromAPI()\n        setDataset(fetchedDataset)\n      } catch (error) {\n        console.error('Error fetching Dataset:', error)\n      }\n    }\n\n    fetchDataset().catch((error) =>\n      console.error('Error fetching Dataset:', error)\n    )\n  }, [])\n\n  const formatDatasetName = (filename) => {\n    const nameWithoutExtension = filename.replace('.json', '')\n    return nameWithoutExtension\n      .replace(/^dataset/i, 'Dataset')\n      .replace(/(\\d+)/, ' $1')\n  }\n\n  const handleDatasetClick = (dataset) => {\n    setSelectedDataset(dataset) // Armazena o dataset selecionado no estado\n  }\n\n  const tooltipData = (file) => [\n    {\n      label: 'Name',\n      value: file.dataset !== null ? file.dataset : 'No dataset Name',\n    },\n    {\n      label: 'Number of Users',\n      value: file.users !== null ? file.users : '0',\n    },\n    {\n      label: 'Dataset Time',\n      value: file.total_duration !== null ? `${file.total_duration} s` : '0 s',\n    },\n    {\n      label: 'Number of Types',\n      value: file.type_counts ? file.type_counts : 'No data',\n    },\n    {\n      label: 'Number of Event Types',\n      value: file.event_type_counts ? file.event_type_counts : 'No data',\n    },\n  ]\n\n  const sortedDataset = dataset.sort((first, second) =>\n    first.dataset.localeCompare(second.dataset)\n  )\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"title\">\n        <h1 className=\"title-text\">\n          Visualization and Analysis <br /> of <br /> Multimodal Interaction\n        </h1>\n      </div>\n\n      {/* Grid com três secções */}\n      <div className=\"grid-container\">\n        {/* Primeira secção com a lista */}\n        <div className=\"grid-item\">\n          <Container>\n            <ListGroup>\n              {sortedDataset.map((file, index) => (\n                <ListGroupItem\n                  key={index}\n                  action\n                  tag=\"button\"\n                  onClick={() => handleDatasetClick(file)} // Chama a função ao clicar no dataset\n                >\n                  {formatDatasetName(file.dataset)} {/* Nome do dataset */}\n                </ListGroupItem>\n              ))}\n            </ListGroup>\n          </Container>\n        </div>\n\n        {/* Segunda secção que mostra a informação do dataset clicado */}\n        <div className=\"grid-item\">\n          {selectedDataset ? ( // Se houver um dataset selecionado, mostre as informações\n            <Container>\n              <h3>Dataset Information</h3>\n              <ListGroup>\n                {tooltipData(selectedDataset).map((info, index) => (\n                  <ListGroupItem key={index}>\n                    <strong>{info.label}:</strong> {info.value}\n                  </ListGroupItem>\n                ))}\n              </ListGroup>\n            </Container>\n          ) : (\n            <p>Select a dataset to view its details</p> // Texto padrão quando nenhum dataset foi selecionado\n          )}\n        </div>\n\n        {/* Terceira secção (pode ser usada para outra funcionalidade ou removida) */}\n        {0 && (\n          <div className=\"grid-item\">\n            <p>Content for section 3</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default MainPage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}