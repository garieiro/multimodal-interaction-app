{"ast":null,"code":"const ConvertDataForLineChart = eventDurations => {\n  const lineChartData = [];\n\n  // Iterar sobre os dados de duração do evento\n  for (const eventType in eventDurations) {\n    // Obter as durações para o tipo de evento atual\n    const durations = eventDurations[eventType];\n\n    // Formatar os dados para o gráfico de linhas\n    const formattedData = durations.map((duration, index) => ({\n      x: new Date(duration.start),\n      // Use o tempo de início do evento como valor x\n      y: duration.duration // Use a duração do evento como valor y\n    }));\n\n    // Adicionar a série de dados ao conjunto de dados para o gráfico de linhas\n    lineChartData.push({\n      name: eventType,\n      data: formattedData\n    });\n  }\n  return lineChartData;\n};\n_c = ConvertDataForLineChart;\nvar _c;\n$RefreshReg$(_c, \"ConvertDataForLineChart\");","map":{"version":3,"names":["ConvertDataForLineChart","eventDurations","lineChartData","eventType","durations","formattedData","map","duration","index","x","Date","start","y","push","name","data","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/staticData/utils/ConvertDataForLineChart.js"],"sourcesContent":["const ConvertDataForLineChart = (eventDurations) => {\n    const lineChartData = [];\n  \n    // Iterar sobre os dados de duração do evento\n    for (const eventType in eventDurations) {\n      // Obter as durações para o tipo de evento atual\n      const durations = eventDurations[eventType];\n  \n      // Formatar os dados para o gráfico de linhas\n      const formattedData = durations.map((duration, index) => ({\n        x: new Date(duration.start), // Use o tempo de início do evento como valor x\n        y: duration.duration, // Use a duração do evento como valor y\n      }));\n  \n      // Adicionar a série de dados ao conjunto de dados para o gráfico de linhas\n      lineChartData.push({\n        name: eventType,\n        data: formattedData,\n      });\n    }\n  \n    return lineChartData;\n};\n"],"mappings":"AAAA,MAAMA,uBAAuB,GAAIC,cAAc,IAAK;EAChD,MAAMC,aAAa,GAAG,EAAE;;EAExB;EACA,KAAK,MAAMC,SAAS,IAAIF,cAAc,EAAE;IACtC;IACA,MAAMG,SAAS,GAAGH,cAAc,CAACE,SAAS,CAAC;;IAE3C;IACA,MAAME,aAAa,GAAGD,SAAS,CAACE,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,MAAM;MACxDC,CAAC,EAAE,IAAIC,IAAI,CAACH,QAAQ,CAACI,KAAK,CAAC;MAAE;MAC7BC,CAAC,EAAEL,QAAQ,CAACA,QAAQ,CAAE;IACxB,CAAC,CAAC,CAAC;;IAEH;IACAL,aAAa,CAACW,IAAI,CAAC;MACjBC,IAAI,EAAEX,SAAS;MACfY,IAAI,EAAEV;IACR,CAAC,CAAC;EACJ;EAEA,OAAOH,aAAa;AACxB,CAAC;AAACc,EAAA,GAtBIhB,uBAAuB;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}