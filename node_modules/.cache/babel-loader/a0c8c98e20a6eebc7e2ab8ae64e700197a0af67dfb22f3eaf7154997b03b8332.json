{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromLogicalExpression;\n/**\n * Extractor function for a LogicalExpression type value node.\n * A logical expression is `a && b` or `a || b`, so we evaluate both sides\n * and return the extracted value of the expression.\n *\n * @param - value - AST Value object with type `LogicalExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromLogicalExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n    left = value.left,\n    right = value.right;\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n  if (operator === '&&') {\n    return leftVal && rightVal;\n  }\n  if (operator === '??') {\n    // return leftVal ?? rightVal; // TODO: update to babel 7\n    return leftVal === null || typeof leftVal === 'undefined' ? rightVal : leftVal;\n  }\n  return leftVal || rightVal;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","extractValueFromLogicalExpression","getValue","require","operator","left","right","leftVal","rightVal"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/node_modules/jsx-ast-utils/lib/values/expressions/LogicalExpression.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromLogicalExpression;\n/**\n * Extractor function for a LogicalExpression type value node.\n * A logical expression is `a && b` or `a || b`, so we evaluate both sides\n * and return the extracted value of the expression.\n *\n * @param - value - AST Value object with type `LogicalExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromLogicalExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n      left = value.left,\n      right = value.right;\n\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n\n  if (operator === '&&') {\n    return leftVal && rightVal;\n  }\n  if (operator === '??') {\n    // return leftVal ?? rightVal; // TODO: update to babel 7\n    return leftVal === null || typeof leftVal === 'undefined' ? rightVal : leftVal;\n  }\n  return leftVal || rightVal;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,iCAAiC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iCAAiCA,CAACF,KAAK,EAAE;EAChD;EACA,IAAIG,QAAQ,GAAGC,OAAO,CAAC,GAAG,CAAC,CAACH,OAAO;EACnC,IAAII,QAAQ,GAAGL,KAAK,CAACK,QAAQ;IACzBC,IAAI,GAAGN,KAAK,CAACM,IAAI;IACjBC,KAAK,GAAGP,KAAK,CAACO,KAAK;EAEvB,IAAIC,OAAO,GAAGL,QAAQ,CAACG,IAAI,CAAC;EAC5B,IAAIG,QAAQ,GAAGN,QAAQ,CAACI,KAAK,CAAC;EAE9B,IAAIF,QAAQ,KAAK,IAAI,EAAE;IACrB,OAAOG,OAAO,IAAIC,QAAQ;EAC5B;EACA,IAAIJ,QAAQ,KAAK,IAAI,EAAE;IACrB;IACA,OAAOG,OAAO,KAAK,IAAI,IAAI,OAAOA,OAAO,KAAK,WAAW,GAAGC,QAAQ,GAAGD,OAAO;EAChF;EACA,OAAOA,OAAO,IAAIC,QAAQ;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}