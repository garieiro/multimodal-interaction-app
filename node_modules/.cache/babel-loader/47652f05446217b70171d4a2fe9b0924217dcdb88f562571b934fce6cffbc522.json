{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromUnaryExpression;\n/**\n * Extractor function for a UnaryExpression type value node.\n * A unary expression is an expression with a unary operator.\n * For example, !\"foobar\" will evaluate to false, so this will return false.\n *\n * @param - value - AST Value object with type `UnaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromUnaryExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n    argument = value.argument;\n  switch (operator) {\n    case '-':\n      return -getValue(argument);\n    case '+':\n      return +getValue(argument);\n    // eslint-disable-line no-implicit-coercion\n    case '!':\n      return !getValue(argument);\n    case '~':\n      return ~getValue(argument);\n    // eslint-disable-line no-bitwise\n    case 'delete':\n      // I believe delete statements evaluate to true.\n      return true;\n    case 'typeof':\n    case 'void':\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","extractValueFromUnaryExpression","getValue","require","operator","argument","undefined"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/node_modules/jsx-ast-utils/lib/values/expressions/UnaryExpression.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromUnaryExpression;\n/**\n * Extractor function for a UnaryExpression type value node.\n * A unary expression is an expression with a unary operator.\n * For example, !\"foobar\" will evaluate to false, so this will return false.\n *\n * @param - value - AST Value object with type `UnaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromUnaryExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n      argument = value.argument;\n\n\n  switch (operator) {\n    case '-':\n      return -getValue(argument);\n    case '+':\n      return +getValue(argument); // eslint-disable-line no-implicit-coercion\n    case '!':\n      return !getValue(argument);\n    case '~':\n      return ~getValue(argument); // eslint-disable-line no-bitwise\n    case 'delete':\n      // I believe delete statements evaluate to true.\n      return true;\n    case 'typeof':\n    case 'void':\n    default:\n      return undefined;\n  }\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,+BAA+B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,+BAA+BA,CAACF,KAAK,EAAE;EAC9C;EACA,IAAIG,QAAQ,GAAGC,OAAO,CAAC,GAAG,CAAC,CAACH,OAAO;EACnC,IAAII,QAAQ,GAAGL,KAAK,CAACK,QAAQ;IACzBC,QAAQ,GAAGN,KAAK,CAACM,QAAQ;EAG7B,QAAQD,QAAQ;IACd,KAAK,GAAG;MACN,OAAO,CAACF,QAAQ,CAACG,QAAQ,CAAC;IAC5B,KAAK,GAAG;MACN,OAAO,CAACH,QAAQ,CAACG,QAAQ,CAAC;IAAE;IAC9B,KAAK,GAAG;MACN,OAAO,CAACH,QAAQ,CAACG,QAAQ,CAAC;IAC5B,KAAK,GAAG;MACN,OAAO,CAACH,QAAQ,CAACG,QAAQ,CAAC;IAAE;IAC9B,KAAK,QAAQ;MACX;MACA,OAAO,IAAI;IACb,KAAK,QAAQ;IACb,KAAK,MAAM;IACX;MACE,OAAOC,SAAS;EACpB;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}