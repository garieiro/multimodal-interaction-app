{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/charts/RealTimeBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeBarChart = () => {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    const svg = d3.select('#chart');\n    const width = 800;\n    const height = 300;\n    const margin = {\n      top: 30,\n      right: 30,\n      bottom: 30,\n      left: 40\n    };\n    const x = d3.scaleBand().range([margin.left, width - margin.right]).padding(0.1);\n    const y = d3.scaleLinear().range([height - margin.bottom, margin.top]);\n    const xAxis = svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`);\n    const yAxis = svg.append('g').attr('transform', `translate(${margin.left},0)`);\n    const updateChart = data => {\n      x.domain(data.map(d => d.name));\n      y.domain([0, d3.max(data, d => d.value)]);\n      xAxis.call(d3.axisBottom(x));\n      yAxis.call(d3.axisLeft(y));\n      svg.selectAll('.bar').data(data).join('rect').attr('class', 'bar').attr('x', d => x(d.name)).attr('y', d => y(d.value)).attr('width', x.bandwidth()).attr('height', d => y(0) - y(d.value)).attr('fill', 'steelblue');\n    };\n    const onDataReceived = receivedData => {\n      // Assuming receivedData is an object with 'name' and 'value' properties\n      const newData = {\n        name: receivedData.name,\n        value: receivedData.value\n      };\n      setChartData(prevData => [...prevData, newData]);\n    };\n\n    // Simulating data received in real-time\n    const interval = setInterval(() => {\n      const randomValue = Math.floor(Math.random() * 100); // Random value for demonstration\n      onDataReceived({\n        name: `Event ${chartData.length + 1}`,\n        value: randomValue\n      });\n    }, 1000); // Update interval in milliseconds\n\n    return () => clearInterval(interval);\n  }, []); // Empty dependency array to run only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    id: \"chart\",\n    width: \"800\",\n    height: \"300\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n_s(RealTimeBarChart, \"Leo9Xk/Ki5G6SkYc3yZESo07mWw=\");\n_c = RealTimeBarChart;\nexport default RealTimeBarChart;\nvar _c;\n$RefreshReg$(_c, \"RealTimeBarChart\");","map":{"version":3,"names":["React","useEffect","useState","d3","jsxDEV","_jsxDEV","RealTimeBarChart","_s","chartData","setChartData","svg","select","width","height","margin","top","right","bottom","left","x","scaleBand","range","padding","y","scaleLinear","xAxis","append","attr","yAxis","updateChart","data","domain","map","d","name","max","value","call","axisBottom","axisLeft","selectAll","join","bandwidth","onDataReceived","receivedData","newData","prevData","interval","setInterval","randomValue","Math","floor","random","length","clearInterval","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/charts/RealTimeBarChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nconst RealTimeBarChart = () => {\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    const svg = d3.select('#chart');\n    const width = 800;\n    const height = 300;\n    const margin = { top: 30, right: 30, bottom: 30, left: 40 };\n\n    const x = d3\n      .scaleBand()\n      .range([margin.left, width - margin.right])\n      .padding(0.1);\n\n    const y = d3.scaleLinear().range([height - margin.bottom, margin.top]);\n\n    const xAxis = svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`);\n    const yAxis = svg.append('g').attr('transform', `translate(${margin.left},0)`);\n\n    const updateChart = (data) => {\n      x.domain(data.map((d) => d.name));\n      y.domain([0, d3.max(data, (d) => d.value)]);\n\n      xAxis.call(d3.axisBottom(x));\n      yAxis.call(d3.axisLeft(y));\n\n      svg.selectAll('.bar')\n        .data(data)\n        .join('rect')\n        .attr('class', 'bar')\n        .attr('x', (d) => x(d.name))\n        .attr('y', (d) => y(d.value))\n        .attr('width', x.bandwidth())\n        .attr('height', (d) => y(0) - y(d.value))\n        .attr('fill', 'steelblue');\n    };\n\n    const onDataReceived = (receivedData) => {\n      // Assuming receivedData is an object with 'name' and 'value' properties\n      const newData = { name: receivedData.name, value: receivedData.value };\n      setChartData((prevData) => [...prevData, newData]);\n    };\n\n    // Simulating data received in real-time\n    const interval = setInterval(() => {\n      const randomValue = Math.floor(Math.random() * 100); // Random value for demonstration\n      onDataReceived({ name: `Event ${chartData.length + 1}`, value: randomValue });\n    }, 1000); // Update interval in milliseconds\n\n    return () => clearInterval(interval);\n  }, []); // Empty dependency array to run only once on mount\n\n  return <svg id=\"chart\" width=\"800\" height=\"300\"></svg>;\n};\n\nexport default RealTimeBarChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}