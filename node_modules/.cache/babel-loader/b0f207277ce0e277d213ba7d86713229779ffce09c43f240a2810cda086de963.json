{"ast":null,"code":"/**\n * @fileoverview Utility functions for React components detection\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst toReversed = require('array.prototype.toreversed');\nconst getScope = require('./eslint').getScope;\n\n/**\n * Search a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {Boolean} True if the variable was found, false if not.\n */\nfunction findVariable(variables, name) {\n  return variables.some(variable => variable.name === name);\n}\n\n/**\n * Find and return a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {Object} Variable if the variable was found, null if not.\n */\nfunction getVariable(variables, name) {\n  return variables.find(variable => variable.name === name);\n}\n\n/**\n * List all variable in a given scope\n *\n * Contain a patch for babel-eslint to avoid https://github.com/babel/babel-eslint/issues/21\n *\n * @param {Object} context The current rule context.\n * @param {ASTNode} node The node to start looking from.\n * @returns {Array} The variables list\n */\nfunction variablesInScope(context, node) {\n  let scope = getScope(context, node);\n  let variables = scope.variables;\n  while (scope.type !== 'global') {\n    scope = scope.upper;\n    variables = scope.variables.concat(variables);\n  }\n  if (scope.childScopes.length) {\n    variables = scope.childScopes[0].variables.concat(variables);\n    if (scope.childScopes[0].childScopes.length) {\n      variables = scope.childScopes[0].childScopes[0].variables.concat(variables);\n    }\n  }\n  return toReversed(variables);\n}\n\n/**\n * Find a variable by name in the current scope.\n * @param {Object} context The current rule context.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @param  {string} name Name of the variable to look for.\n * @returns {ASTNode|null} Return null if the variable could not be found, ASTNode otherwise.\n */\nfunction findVariableByName(context, node, name) {\n  const variable = getVariable(variablesInScope(context, node), name);\n  if (!variable || !variable.defs[0] || !variable.defs[0].node) {\n    return null;\n  }\n  if (variable.defs[0].node.type === 'TypeAlias') {\n    return variable.defs[0].node.right;\n  }\n  if (variable.defs[0].type === 'ImportBinding') {\n    return variable.defs[0].node;\n  }\n  return variable.defs[0].node.init;\n}\n\n/**\n * Returns the latest definition of the variable.\n * @param {Object} variable\n * @returns {Object | undefined} The latest variable definition or undefined.\n */\nfunction getLatestVariableDefinition(variable) {\n  return variable.defs[variable.defs.length - 1];\n}\nmodule.exports = {\n  findVariable,\n  findVariableByName,\n  getVariable,\n  variablesInScope,\n  getLatestVariableDefinition\n};","map":{"version":3,"names":["toReversed","require","getScope","findVariable","variables","name","some","variable","getVariable","find","variablesInScope","context","node","scope","type","upper","concat","childScopes","length","findVariableByName","defs","right","init","getLatestVariableDefinition","module","exports"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/node_modules/eslint-plugin-react/lib/util/variable.js"],"sourcesContent":["/**\n * @fileoverview Utility functions for React components detection\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst toReversed = require('array.prototype.toreversed');\nconst getScope = require('./eslint').getScope;\n\n/**\n * Search a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {Boolean} True if the variable was found, false if not.\n */\nfunction findVariable(variables, name) {\n  return variables.some((variable) => variable.name === name);\n}\n\n/**\n * Find and return a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {Object} Variable if the variable was found, null if not.\n */\nfunction getVariable(variables, name) {\n  return variables.find((variable) => variable.name === name);\n}\n\n/**\n * List all variable in a given scope\n *\n * Contain a patch for babel-eslint to avoid https://github.com/babel/babel-eslint/issues/21\n *\n * @param {Object} context The current rule context.\n * @param {ASTNode} node The node to start looking from.\n * @returns {Array} The variables list\n */\nfunction variablesInScope(context, node) {\n  let scope = getScope(context, node);\n  let variables = scope.variables;\n\n  while (scope.type !== 'global') {\n    scope = scope.upper;\n    variables = scope.variables.concat(variables);\n  }\n  if (scope.childScopes.length) {\n    variables = scope.childScopes[0].variables.concat(variables);\n    if (scope.childScopes[0].childScopes.length) {\n      variables = scope.childScopes[0].childScopes[0].variables.concat(variables);\n    }\n  }\n\n  return toReversed(variables);\n}\n\n/**\n * Find a variable by name in the current scope.\n * @param {Object} context The current rule context.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @param  {string} name Name of the variable to look for.\n * @returns {ASTNode|null} Return null if the variable could not be found, ASTNode otherwise.\n */\nfunction findVariableByName(context, node, name) {\n  const variable = getVariable(variablesInScope(context, node), name);\n\n  if (!variable || !variable.defs[0] || !variable.defs[0].node) {\n    return null;\n  }\n\n  if (variable.defs[0].node.type === 'TypeAlias') {\n    return variable.defs[0].node.right;\n  }\n\n  if (variable.defs[0].type === 'ImportBinding') {\n    return variable.defs[0].node;\n  }\n\n  return variable.defs[0].node.init;\n}\n\n/**\n * Returns the latest definition of the variable.\n * @param {Object} variable\n * @returns {Object | undefined} The latest variable definition or undefined.\n */\nfunction getLatestVariableDefinition(variable) {\n  return variable.defs[variable.defs.length - 1];\n}\n\nmodule.exports = {\n  findVariable,\n  findVariableByName,\n  getVariable,\n  variablesInScope,\n  getLatestVariableDefinition,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}