{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/RealTimeData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport RealTimeBarChart from './charts/RealTimeBarChart';\nimport KafkaDataReceiver from '../../api/OnlineData';\nimport CountRealTimeEvents from './CountRealTimeEvents';\nimport EventDurationRealTime from './EventDurationRealTime';\nimport RealTimeScatterPlot from './charts/RealTimeScatterPlot';\nimport ConvertDataForScatterPlotRealTime from './ConvertDataForScatterPlotRealTime';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeData = () => {\n  _s();\n  const [realTimeData, setRealTimeData] = useState([]);\n  const [eventDurations, setEventDurations] = useState({});\n  useEffect(() => {\n    const eventCounts = {}; // Inicializa os contadores de eventos\n    const eventDuration = {}; // Incilaliza os contadores te duração de evento \n\n    const onDataReceived = receivedData => {\n      // Atualiza o estado dos contadores de eventos com base nos dados recebidos\n      const updatedEventCounts = CountRealTimeEvents(receivedData, eventCounts);\n\n      // Atualiza os contadores de duração de eventos com base nos dados recebidos\n      const updatedEventDurations = EventDurationRealTime(receivedData, eventDuration);\n      const newDuration = ConvertDataForScatterPlotRealTime(updatedEventDurations);\n\n      // Converte os dados atualizados em um formato adequado para o gráfico\n      const newData = Object.entries(updatedEventCounts).map(([eventType, count]) => ({\n        name: eventType,\n        value: count\n      }));\n      console.log(\"fisrt:\", newDuration);\n      // Atualiza o estado com os novos dados do gráfico\n      setRealTimeData(newData);\n      setEventDurations(newDuration);\n    };\n\n    // Inicia a recepção de dados em tempo real\n    KafkaDataReceiver(onDataReceived);\n  }, []); // O useEffect é executado apenas na montagem do componente\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Bar Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RealTimeBarChart, {\n      data: realTimeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RealTimeScatterPlot, {\n      data: eventDurations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTimeData, \"qY5r1d/xYeKUaruHrHVYPyHQzGA=\");\n_c = RealTimeData;\nexport default RealTimeData;\nvar _c;\n$RefreshReg$(_c, \"RealTimeData\");","map":{"version":3,"names":["React","useEffect","useState","RealTimeBarChart","KafkaDataReceiver","CountRealTimeEvents","EventDurationRealTime","RealTimeScatterPlot","ConvertDataForScatterPlotRealTime","jsxDEV","_jsxDEV","RealTimeData","_s","realTimeData","setRealTimeData","eventDurations","setEventDurations","eventCounts","eventDuration","onDataReceived","receivedData","updatedEventCounts","updatedEventDurations","newDuration","newData","Object","entries","map","eventType","count","name","value","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/RealTimeData.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport RealTimeBarChart from './charts/RealTimeBarChart';\nimport KafkaDataReceiver from '../../api/OnlineData';\nimport CountRealTimeEvents from './CountRealTimeEvents';\nimport EventDurationRealTime from './EventDurationRealTime';\nimport RealTimeScatterPlot from './charts/RealTimeScatterPlot';\nimport ConvertDataForScatterPlotRealTime from './ConvertDataForScatterPlotRealTime';\n\nconst RealTimeData = () => {\n  const [realTimeData, setRealTimeData] = useState([]);\n  const [eventDurations, setEventDurations] = useState({});\n\n  useEffect(() => {\n    const eventCounts = {}; // Inicializa os contadores de eventos\n    const eventDuration = {}; // Incilaliza os contadores te duração de evento \n\n    const onDataReceived = (receivedData) => {\n      // Atualiza o estado dos contadores de eventos com base nos dados recebidos\n      const updatedEventCounts = CountRealTimeEvents(receivedData, eventCounts);\n\n      // Atualiza os contadores de duração de eventos com base nos dados recebidos\n      const updatedEventDurations = EventDurationRealTime(receivedData, eventDuration);\n      const newDuration = ConvertDataForScatterPlotRealTime(updatedEventDurations)\n      \n      // Converte os dados atualizados em um formato adequado para o gráfico\n      const newData = Object.entries(updatedEventCounts).map(([eventType, count]) => ({\n        name: eventType,\n        value: count,\n      }));\n      console.log(\"fisrt:\", newDuration)\n      // Atualiza o estado com os novos dados do gráfico\n      setRealTimeData(newData);\n      setEventDurations(newDuration)\n    };\n\n    // Inicia a recepção de dados em tempo real\n    KafkaDataReceiver(onDataReceived);\n  }, []); // O useEffect é executado apenas na montagem do componente\n  return (\n    <div>\n      <h1>Real-Time Bar Chart</h1>\n      <RealTimeBarChart data={realTimeData} />\n      <RealTimeScatterPlot data={eventDurations} />\n    </div>\n  );\n};\n\nexport default RealTimeData;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,OAAOC,iBAAiB,MAAM,sBAAsB;AACpD,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,mBAAmB,MAAM,8BAA8B;AAC9D,OAAOC,iCAAiC,MAAM,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpF,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,MAAMgB,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IACxB,MAAMC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;;IAE1B,MAAMC,cAAc,GAAIC,YAAY,IAAK;MACvC;MACA,MAAMC,kBAAkB,GAAGhB,mBAAmB,CAACe,YAAY,EAAEH,WAAW,CAAC;;MAEzE;MACA,MAAMK,qBAAqB,GAAGhB,qBAAqB,CAACc,YAAY,EAAEF,aAAa,CAAC;MAChF,MAAMK,WAAW,GAAGf,iCAAiC,CAACc,qBAAqB,CAAC;;MAE5E;MACA,MAAME,OAAO,GAAGC,MAAM,CAACC,OAAO,CAACL,kBAAkB,CAAC,CAACM,GAAG,CAAC,CAAC,CAACC,SAAS,EAAEC,KAAK,CAAC,MAAM;QAC9EC,IAAI,EAAEF,SAAS;QACfG,KAAK,EAAEF;MACT,CAAC,CAAC,CAAC;MACHG,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEV,WAAW,CAAC;MAClC;MACAT,eAAe,CAACU,OAAO,CAAC;MACxBR,iBAAiB,CAACO,WAAW,CAAC;IAChC,CAAC;;IAED;IACAnB,iBAAiB,CAACe,cAAc,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACR,oBACET,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5B5B,OAAA,CAACP,gBAAgB;MAACoC,IAAI,EAAE1B;IAAa;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxC5B,OAAA,CAACH,mBAAmB;MAACgC,IAAI,EAAExB;IAAe;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV,CAAC;AAAC1B,EAAA,CArCID,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAuClB,eAAeA,YAAY;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}