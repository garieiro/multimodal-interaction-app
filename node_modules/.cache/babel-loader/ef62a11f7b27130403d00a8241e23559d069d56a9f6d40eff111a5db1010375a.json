{"ast":null,"code":"const transformDataToSankeyChart = data => {\n  console.log('Received data:', data);\n  if (!data || typeof data !== 'object') {\n    throw new Error('Invalid data: Data must be an object.');\n  }\n  const nodesSet = new Set();\n  const links = [];\n\n  // Itera sobre as chaves do objeto de dados\n  Object.keys(data).forEach(key => {\n    data[key].forEach(entry => {\n      const {\n        Source,\n        Target,\n        Start,\n        End,\n        Type\n      } = entry; // Incluindo 'Type'\n\n      nodesSet.add(Source);\n      nodesSet.add(Target);\n      const duration = (new Date(End) - new Date(Start)) / 1000;\n      links.push({\n        source: Source,\n        target: Target,\n        value: duration\n      });\n\n      // Se o nó ainda não tem uma categoria atribuída, defina-a aqui\n      if (!nodesSet.has(Source)) {\n        nodesSet.add({\n          name: Source,\n          category: Type\n        }); // Usa 'Type' como categoria\n      }\n      if (!nodesSet.has(Target)) {\n        nodesSet.add({\n          name: Target,\n          category: Type\n        }); // Usa 'Type' como categoria\n      }\n    });\n  });\n\n  // Converte o Set em um array e garante que a categoria está sendo definida corretamente\n  const nodes = Array.from(nodesSet).map(name => {\n    // Você pode precisar de alguma lógica para garantir que a categoria é extraída corretamente\n    return {\n      name: name.name,\n      // Mantém o nome original\n      category: name.category || 'default' // Define a categoria como Type ou 'default'\n    };\n  });\n  console.log({\n    nodes,\n    links\n  });\n  return {\n    nodes,\n    links\n  };\n};\nexport default transformDataToSankeyChart;","map":{"version":3,"names":["transformDataToSankeyChart","data","console","log","Error","nodesSet","Set","links","Object","keys","forEach","key","entry","Source","Target","Start","End","Type","add","duration","Date","push","source","target","value","has","name","category","nodes","Array","from","map"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/TransformDate/transformDataToSankeyChart.js"],"sourcesContent":["const transformDataToSankeyChart = (data) => {\n  console.log('Received data:', data)\n\n  if (!data || typeof data !== 'object') {\n    throw new Error('Invalid data: Data must be an object.')\n  }\n\n  const nodesSet = new Set()\n  const links = []\n\n  // Itera sobre as chaves do objeto de dados\n  Object.keys(data).forEach((key) => {\n    data[key].forEach((entry) => {\n      const { Source, Target, Start, End, Type } = entry // Incluindo 'Type'\n\n      nodesSet.add(Source)\n      nodesSet.add(Target)\n\n      const duration = (new Date(End) - new Date(Start)) / 1000\n\n      links.push({\n        source: Source,\n        target: Target,\n        value: duration,\n      })\n\n      // Se o nó ainda não tem uma categoria atribuída, defina-a aqui\n      if (!nodesSet.has(Source)) {\n        nodesSet.add({ name: Source, category: Type }) // Usa 'Type' como categoria\n      }\n      if (!nodesSet.has(Target)) {\n        nodesSet.add({ name: Target, category: Type }) // Usa 'Type' como categoria\n      }\n    })\n  })\n\n  // Converte o Set em um array e garante que a categoria está sendo definida corretamente\n  const nodes = Array.from(nodesSet).map((name) => {\n    // Você pode precisar de alguma lógica para garantir que a categoria é extraída corretamente\n    return {\n      name: name.name, // Mantém o nome original\n      category: name.category || 'default', // Define a categoria como Type ou 'default'\n    }\n  })\n\n  console.log({ nodes, links })\n  return { nodes, links }\n}\n\nexport default transformDataToSankeyChart\n"],"mappings":"AAAA,MAAMA,0BAA0B,GAAIC,IAAI,IAAK;EAC3CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;EAEnC,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACrC,MAAM,IAAIG,KAAK,CAAC,uCAAuC,CAAC;EAC1D;EAEA,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC1B,MAAMC,KAAK,GAAG,EAAE;;EAEhB;EACAC,MAAM,CAACC,IAAI,CAACR,IAAI,CAAC,CAACS,OAAO,CAAEC,GAAG,IAAK;IACjCV,IAAI,CAACU,GAAG,CAAC,CAACD,OAAO,CAAEE,KAAK,IAAK;MAC3B,MAAM;QAAEC,MAAM;QAAEC,MAAM;QAAEC,KAAK;QAAEC,GAAG;QAAEC;MAAK,CAAC,GAAGL,KAAK,EAAC;;MAEnDP,QAAQ,CAACa,GAAG,CAACL,MAAM,CAAC;MACpBR,QAAQ,CAACa,GAAG,CAACJ,MAAM,CAAC;MAEpB,MAAMK,QAAQ,GAAG,CAAC,IAAIC,IAAI,CAACJ,GAAG,CAAC,GAAG,IAAII,IAAI,CAACL,KAAK,CAAC,IAAI,IAAI;MAEzDR,KAAK,CAACc,IAAI,CAAC;QACTC,MAAM,EAAET,MAAM;QACdU,MAAM,EAAET,MAAM;QACdU,KAAK,EAAEL;MACT,CAAC,CAAC;;MAEF;MACA,IAAI,CAACd,QAAQ,CAACoB,GAAG,CAACZ,MAAM,CAAC,EAAE;QACzBR,QAAQ,CAACa,GAAG,CAAC;UAAEQ,IAAI,EAAEb,MAAM;UAAEc,QAAQ,EAAEV;QAAK,CAAC,CAAC,EAAC;MACjD;MACA,IAAI,CAACZ,QAAQ,CAACoB,GAAG,CAACX,MAAM,CAAC,EAAE;QACzBT,QAAQ,CAACa,GAAG,CAAC;UAAEQ,IAAI,EAAEZ,MAAM;UAAEa,QAAQ,EAAEV;QAAK,CAAC,CAAC,EAAC;MACjD;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMW,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACzB,QAAQ,CAAC,CAAC0B,GAAG,CAAEL,IAAI,IAAK;IAC/C;IACA,OAAO;MACLA,IAAI,EAAEA,IAAI,CAACA,IAAI;MAAE;MACjBC,QAAQ,EAAED,IAAI,CAACC,QAAQ,IAAI,SAAS,CAAE;IACxC,CAAC;EACH,CAAC,CAAC;EAEFzB,OAAO,CAACC,GAAG,CAAC;IAAEyB,KAAK;IAAErB;EAAM,CAAC,CAAC;EAC7B,OAAO;IAAEqB,KAAK;IAAErB;EAAM,CAAC;AACzB,CAAC;AAED,eAAeP,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}