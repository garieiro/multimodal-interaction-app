{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/charts/RealTimeScatterPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeScatterPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    if (!data) return;\n\n    // Analisa os dados JSON\n    const eventData = JSON.parse(data.data);\n\n    // Extrai os dados relevantes para o gráfico\n    const eventType = eventData.EventType;\n    const startTimestamp = new Date(eventData.Start);\n    const endTimestamp = new Date(eventData.End);\n    const duration = endTimestamp - startTimestamp;\n\n    // Define a largura e altura do gráfico\n    const width = 600;\n    const height = 300;\n\n    // Configuração do SVG e margens\n    const margin = {\n      top: 40,\n      right: 40,\n      bottom: 40,\n      left: 40\n    };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Seleciona o elemento SVG e define sua largura e altura\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n    // Define escalas para os eixos x e y\n    const xScale = d3.scaleBand().domain([eventType]) // Apenas um evento, então definimos o domínio manualmente\n    .range([margin.left, innerWidth + margin.left]).padding(0.1);\n    const yScale = d3.scaleLinear().domain([0, duration]).range([innerHeight + margin.top, margin.top]);\n\n    // Desenha o ponto no gráfico\n    svg.selectAll('circle').data([duration]) // Usamos apenas um ponto\n    .join('circle').attr('cx', xScale(eventType) + xScale.bandwidth() / 2).attr('cy', yScale(duration)).attr('r', 5).attr('fill', 'steelblue');\n\n    // Adiciona os eixos x e y\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale).ticks(5);\n    svg.append('g').attr('transform', `translate(0, ${innerHeight + margin.top})`).call(xAxis);\n    svg.append('g').attr('transform', `translate(${margin.left}, 0)`).call(yAxis);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n};\n_s(RealTimeScatterPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = RealTimeScatterPlot;\nexport default RealTimeScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"RealTimeScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","RealTimeScatterPlot","data","_s","svgRef","eventData","JSON","parse","eventType","EventType","startTimestamp","Date","Start","endTimestamp","End","duration","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","svg","select","current","attr","xScale","scaleBand","domain","range","padding","yScale","scaleLinear","selectAll","join","bandwidth","xAxis","axisBottom","yAxis","axisLeft","ticks","append","call","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/charts/RealTimeScatterPlot.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst RealTimeScatterPlot = ({ data }) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    if (!data) return;\n\n    // Analisa os dados JSON\n    const eventData = JSON.parse(data.data);\n\n    // Extrai os dados relevantes para o gráfico\n    const eventType = eventData.EventType;\n    const startTimestamp = new Date(eventData.Start);\n    const endTimestamp = new Date(eventData.End);\n    const duration = endTimestamp - startTimestamp;\n\n    // Define a largura e altura do gráfico\n    const width = 600;\n    const height = 300;\n\n    // Configuração do SVG e margens\n    const margin = { top: 40, right: 40, bottom: 40, left: 40 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Seleciona o elemento SVG e define sua largura e altura\n    const svg = d3.select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height);\n\n    // Define escalas para os eixos x e y\n    const xScale = d3.scaleBand()\n      .domain([eventType]) // Apenas um evento, então definimos o domínio manualmente\n      .range([margin.left, innerWidth + margin.left])\n      .padding(0.1);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, duration])\n      .range([innerHeight + margin.top, margin.top]);\n\n    // Desenha o ponto no gráfico\n    svg.selectAll('circle')\n      .data([duration]) // Usamos apenas um ponto\n      .join('circle')\n      .attr('cx', xScale(eventType) + xScale.bandwidth() / 2)\n      .attr('cy', yScale(duration))\n      .attr('r', 5)\n      .attr('fill', 'steelblue');\n\n    // Adiciona os eixos x e y\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale).ticks(5);\n\n    svg.append('g')\n      .attr('transform', `translate(0, ${innerHeight + margin.top})`)\n      .call(xAxis);\n\n    svg.append('g')\n      .attr('transform', `translate(${margin.left}, 0)`)\n      .call(yAxis);\n\n  }, [data]);\n\n  return <svg ref={svgRef}></svg>;\n};\n\nexport default RealTimeScatterPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}