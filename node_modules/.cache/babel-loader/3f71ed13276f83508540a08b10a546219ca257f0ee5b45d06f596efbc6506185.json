{"ast":null,"code":"/**\n * @fileoverview Utility functions for React pragma configuration\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst getSourceCode = require('./eslint').getSourceCode;\nconst JSX_ANNOTATION_REGEX = /@jsx\\s+([^\\s]+)/;\n// Does not check for reserved keywords or unicode characters\nconst JS_IDENTIFIER_REGEX = /^[_$a-zA-Z][_$a-zA-Z0-9]*$/;\n\n/**\n * @param {Context} context\n * @returns {string}\n */\nfunction getCreateClassFromContext(context) {\n  let pragma = 'createReactClass';\n  // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  if (context.settings.react && context.settings.react.createClass) {\n    pragma = context.settings.react.createClass;\n  }\n  if (!JS_IDENTIFIER_REGEX.test(pragma)) {\n    throw new Error(`createClass pragma ${pragma} is not a valid function name`);\n  }\n  return pragma;\n}\n\n/**\n * @param {Context} context\n * @returns {string}\n */\nfunction getFragmentFromContext(context) {\n  let pragma = 'Fragment';\n  // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  if (context.settings.react && context.settings.react.fragment) {\n    pragma = context.settings.react.fragment;\n  }\n  if (!JS_IDENTIFIER_REGEX.test(pragma)) {\n    throw new Error(`Fragment pragma ${pragma} is not a valid identifier`);\n  }\n  return pragma;\n}\n\n/**\n * @param {Context} context\n * @returns {string}\n */\nfunction getFromContext(context) {\n  let pragma = 'React';\n  const sourceCode = getSourceCode(context);\n  const pragmaNode = sourceCode.getAllComments().find(node => JSX_ANNOTATION_REGEX.test(node.value));\n  if (pragmaNode) {\n    const matches = JSX_ANNOTATION_REGEX.exec(pragmaNode.value);\n    pragma = matches[1].split('.')[0];\n    // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  } else if (context.settings.react && context.settings.react.pragma) {\n    pragma = context.settings.react.pragma;\n  }\n  if (!JS_IDENTIFIER_REGEX.test(pragma)) {\n    throw new Error(`React pragma ${pragma} is not a valid identifier`);\n  }\n  return pragma;\n}\nmodule.exports = {\n  getCreateClassFromContext,\n  getFragmentFromContext,\n  getFromContext\n};","map":{"version":3,"names":["getSourceCode","require","JSX_ANNOTATION_REGEX","JS_IDENTIFIER_REGEX","getCreateClassFromContext","context","pragma","settings","react","createClass","test","Error","getFragmentFromContext","fragment","getFromContext","sourceCode","pragmaNode","getAllComments","find","node","value","matches","exec","split","module","exports"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/node_modules/eslint-plugin-react/lib/util/pragma.js"],"sourcesContent":["/**\n * @fileoverview Utility functions for React pragma configuration\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst getSourceCode = require('./eslint').getSourceCode;\n\nconst JSX_ANNOTATION_REGEX = /@jsx\\s+([^\\s]+)/;\n// Does not check for reserved keywords or unicode characters\nconst JS_IDENTIFIER_REGEX = /^[_$a-zA-Z][_$a-zA-Z0-9]*$/;\n\n/**\n * @param {Context} context\n * @returns {string}\n */\nfunction getCreateClassFromContext(context) {\n  let pragma = 'createReactClass';\n  // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  if (context.settings.react && context.settings.react.createClass) {\n    pragma = context.settings.react.createClass;\n  }\n  if (!JS_IDENTIFIER_REGEX.test(pragma)) {\n    throw new Error(`createClass pragma ${pragma} is not a valid function name`);\n  }\n  return pragma;\n}\n\n/**\n * @param {Context} context\n * @returns {string}\n */\nfunction getFragmentFromContext(context) {\n  let pragma = 'Fragment';\n  // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  if (context.settings.react && context.settings.react.fragment) {\n    pragma = context.settings.react.fragment;\n  }\n  if (!JS_IDENTIFIER_REGEX.test(pragma)) {\n    throw new Error(`Fragment pragma ${pragma} is not a valid identifier`);\n  }\n  return pragma;\n}\n\n/**\n * @param {Context} context\n * @returns {string}\n */\nfunction getFromContext(context) {\n  let pragma = 'React';\n\n  const sourceCode = getSourceCode(context);\n  const pragmaNode = sourceCode.getAllComments().find((node) => JSX_ANNOTATION_REGEX.test(node.value));\n\n  if (pragmaNode) {\n    const matches = JSX_ANNOTATION_REGEX.exec(pragmaNode.value);\n    pragma = matches[1].split('.')[0];\n    // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  } else if (context.settings.react && context.settings.react.pragma) {\n    pragma = context.settings.react.pragma;\n  }\n\n  if (!JS_IDENTIFIER_REGEX.test(pragma)) {\n    throw new Error(`React pragma ${pragma} is not a valid identifier`);\n  }\n  return pragma;\n}\n\nmodule.exports = {\n  getCreateClassFromContext,\n  getFragmentFromContext,\n  getFromContext,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,UAAU,CAAC,CAACD,aAAa;AAEvD,MAAME,oBAAoB,GAAG,iBAAiB;AAC9C;AACA,MAAMC,mBAAmB,GAAG,4BAA4B;;AAExD;AACA;AACA;AACA;AACA,SAASC,yBAAyBA,CAACC,OAAO,EAAE;EAC1C,IAAIC,MAAM,GAAG,kBAAkB;EAC/B;EACA,IAAID,OAAO,CAACE,QAAQ,CAACC,KAAK,IAAIH,OAAO,CAACE,QAAQ,CAACC,KAAK,CAACC,WAAW,EAAE;IAChEH,MAAM,GAAGD,OAAO,CAACE,QAAQ,CAACC,KAAK,CAACC,WAAW;EAC7C;EACA,IAAI,CAACN,mBAAmB,CAACO,IAAI,CAACJ,MAAM,CAAC,EAAE;IACrC,MAAM,IAAIK,KAAK,CAAC,sBAAsBL,MAAM,+BAA+B,CAAC;EAC9E;EACA,OAAOA,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA,SAASM,sBAAsBA,CAACP,OAAO,EAAE;EACvC,IAAIC,MAAM,GAAG,UAAU;EACvB;EACA,IAAID,OAAO,CAACE,QAAQ,CAACC,KAAK,IAAIH,OAAO,CAACE,QAAQ,CAACC,KAAK,CAACK,QAAQ,EAAE;IAC7DP,MAAM,GAAGD,OAAO,CAACE,QAAQ,CAACC,KAAK,CAACK,QAAQ;EAC1C;EACA,IAAI,CAACV,mBAAmB,CAACO,IAAI,CAACJ,MAAM,CAAC,EAAE;IACrC,MAAM,IAAIK,KAAK,CAAC,mBAAmBL,MAAM,4BAA4B,CAAC;EACxE;EACA,OAAOA,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA,SAASQ,cAAcA,CAACT,OAAO,EAAE;EAC/B,IAAIC,MAAM,GAAG,OAAO;EAEpB,MAAMS,UAAU,GAAGf,aAAa,CAACK,OAAO,CAAC;EACzC,MAAMW,UAAU,GAAGD,UAAU,CAACE,cAAc,CAAC,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAKjB,oBAAoB,CAACQ,IAAI,CAACS,IAAI,CAACC,KAAK,CAAC,CAAC;EAEpG,IAAIJ,UAAU,EAAE;IACd,MAAMK,OAAO,GAAGnB,oBAAoB,CAACoB,IAAI,CAACN,UAAU,CAACI,KAAK,CAAC;IAC3Dd,MAAM,GAAGe,OAAO,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACjC;EACF,CAAC,MAAM,IAAIlB,OAAO,CAACE,QAAQ,CAACC,KAAK,IAAIH,OAAO,CAACE,QAAQ,CAACC,KAAK,CAACF,MAAM,EAAE;IAClEA,MAAM,GAAGD,OAAO,CAACE,QAAQ,CAACC,KAAK,CAACF,MAAM;EACxC;EAEA,IAAI,CAACH,mBAAmB,CAACO,IAAI,CAACJ,MAAM,CAAC,EAAE;IACrC,MAAM,IAAIK,KAAK,CAAC,gBAAgBL,MAAM,4BAA4B,CAAC;EACrE;EACA,OAAOA,MAAM;AACf;AAEAkB,MAAM,CAACC,OAAO,GAAG;EACfrB,yBAAyB;EACzBQ,sBAAsB;EACtBE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}