{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/RealTimeData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport RealTimeBarChart from './charts/RealTimeBarChart';\nimport KafkaDataReceiver from '../../api/OnlineData';\nimport CountRealTimeEvents from './CountRealTimeEvents';\nimport ConvertDataForScatterPlotRealTime from './ConvertDataForScatterPlotRealTime';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeData = () => {\n  _s();\n  const [realTimeData, setRealTimeData] = useState([]);\n  const [eventDurations, setEventDurations] = useState({});\n  useEffect(() => {\n    const eventCounts = {}; // Inicializa os contadores de eventos\n\n    const onDataReceived = receivedData => {\n      // Atualiza o estado dos contadores de eventos com base nos dados recebidos\n      const updatedEventCounts = CountRealTimeEvents(receivedData, eventCounts);\n\n      // Converte os dados atualizados em um formato adequado para o gráfico\n      const newData = Object.entries(updatedEventCounts).map(([eventType, count]) => ({\n        name: eventType,\n        value: count\n      }));\n\n      // Atualiza o estado com os novos dados do gráfico\n      setRealTimeData(newData);\n\n      // Atualiza as durações dos eventos\n      const updatedEventDurations = EventDurationRealTime(receivedData, eventDurations);\n      setEventDurations(updatedEventDurations);\n    };\n\n    // Inicia a recepção de dados em tempo real\n    KafkaDataReceiver(onDataReceived);\n  }, []); // O useEffect é executado apenas na montagem do componente\n\n  // Converte os dados das durações dos eventos para o formato adequado para o gráfico de dispersão\n  const scatterPlotData = ConvertDataForScatterPlotRealTime(eventDurations);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Bar Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RealTimeBarChart, {\n      data: realTimeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTimeData, \"qY5r1d/xYeKUaruHrHVYPyHQzGA=\");\n_c = RealTimeData;\nexport default RealTimeData;\nvar _c;\n$RefreshReg$(_c, \"RealTimeData\");","map":{"version":3,"names":["React","useEffect","useState","RealTimeBarChart","KafkaDataReceiver","CountRealTimeEvents","ConvertDataForScatterPlotRealTime","jsxDEV","_jsxDEV","RealTimeData","_s","realTimeData","setRealTimeData","eventDurations","setEventDurations","eventCounts","onDataReceived","receivedData","updatedEventCounts","newData","Object","entries","map","eventType","count","name","value","updatedEventDurations","EventDurationRealTime","scatterPlotData","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/RealTimeData.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport RealTimeBarChart from './charts/RealTimeBarChart';\nimport KafkaDataReceiver from '../../api/OnlineData';\nimport CountRealTimeEvents from './CountRealTimeEvents';\nimport ConvertDataForScatterPlotRealTime from './ConvertDataForScatterPlotRealTime';\n\nconst RealTimeData = () => {\n  const [realTimeData, setRealTimeData] = useState([]);\n  const [eventDurations, setEventDurations] = useState({});\n\n  useEffect(() => {\n    const eventCounts = {}; // Inicializa os contadores de eventos\n\n    const onDataReceived = (receivedData) => {\n      // Atualiza o estado dos contadores de eventos com base nos dados recebidos\n      const updatedEventCounts = CountRealTimeEvents(receivedData, eventCounts);\n\n      // Converte os dados atualizados em um formato adequado para o gráfico\n      const newData = Object.entries(updatedEventCounts).map(([eventType, count]) => ({\n        name: eventType,\n        value: count,\n      }));\n\n      // Atualiza o estado com os novos dados do gráfico\n      setRealTimeData(newData);\n\n      // Atualiza as durações dos eventos\n      const updatedEventDurations = EventDurationRealTime(receivedData, eventDurations);\n      setEventDurations(updatedEventDurations);\n    };\n\n    // Inicia a recepção de dados em tempo real\n    KafkaDataReceiver(onDataReceived);\n  }, []); // O useEffect é executado apenas na montagem do componente\n\n  // Converte os dados das durações dos eventos para o formato adequado para o gráfico de dispersão\n  const scatterPlotData = ConvertDataForScatterPlotRealTime(eventDurations);\n\n  return (\n    <div>\n      <h1>Real-Time Bar Chart</h1>\n      <RealTimeBarChart data={realTimeData} />\n      {/* Adicione o gráfico de dispersão aqui usando scatterPlotData */}\n    </div>\n  );\n};\n\nexport default RealTimeData;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,OAAOC,iBAAiB,MAAM,sBAAsB;AACpD,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,iCAAiC,MAAM,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpF,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,MAAMc,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;;IAExB,MAAMC,cAAc,GAAIC,YAAY,IAAK;MACvC;MACA,MAAMC,kBAAkB,GAAGb,mBAAmB,CAACY,YAAY,EAAEF,WAAW,CAAC;;MAEzE;MACA,MAAMI,OAAO,GAAGC,MAAM,CAACC,OAAO,CAACH,kBAAkB,CAAC,CAACI,GAAG,CAAC,CAAC,CAACC,SAAS,EAAEC,KAAK,CAAC,MAAM;QAC9EC,IAAI,EAAEF,SAAS;QACfG,KAAK,EAAEF;MACT,CAAC,CAAC,CAAC;;MAEH;MACAZ,eAAe,CAACO,OAAO,CAAC;;MAExB;MACA,MAAMQ,qBAAqB,GAAGC,qBAAqB,CAACX,YAAY,EAAEJ,cAAc,CAAC;MACjFC,iBAAiB,CAACa,qBAAqB,CAAC;IAC1C,CAAC;;IAED;IACAvB,iBAAiB,CAACY,cAAc,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMa,eAAe,GAAGvB,iCAAiC,CAACO,cAAc,CAAC;EAEzE,oBACEL,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5B1B,OAAA,CAACL,gBAAgB;MAACgC,IAAI,EAAExB;IAAa;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAErC,CAAC;AAEV,CAAC;AAACxB,EAAA,CAvCID,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAyClB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}