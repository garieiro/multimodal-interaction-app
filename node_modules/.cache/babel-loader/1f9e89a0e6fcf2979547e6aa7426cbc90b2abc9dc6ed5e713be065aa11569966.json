{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/App.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport fetchStaticDataFromAPI from './api/StaticData';\nimport socketIOClient from 'socket.io-client';\nimport './App.css';\nimport BarChart from './components/charts/staticData/BarChart';\nimport ScatterPlot from './components/charts/staticData/ScatterPlot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [staticData, setStaticData] = useState([]);\n  const [onlineData, setOnlineData] = useState([]);\n  const ENDPOINT = 'http://localhost:8000'; // Endereço do servidor Flask-SocketIO\n\n  const KafkaDataReceiver = () => {\n    _s();\n    useEffect(() => {\n      const socket = socketIOClient(ENDPOINT);\n      socket.on('connect', () => {\n        console.log('Connected to server');\n      });\n      socket.on('data_response', data => {\n        console.log('Received data:', data);\n      });\n      socket.on('disconnect', () => {\n        console.log('Disconnected from server');\n      });\n      return () => {\n        socket.disconnect();\n      };\n    }, []);\n  };\n  _s(KafkaDataReceiver, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  console.log(\"Aqui: \", KafkaDataReceiver);\n  useEffect(() => {\n    const fetchStaticData = async () => {\n      try {\n        const fetchedStaticData = await fetchStaticDataFromAPI();\n        setStaticData(fetchedStaticData);\n      } catch (error) {\n        console.error('Error fetching Static Data:', error);\n      }\n    };\n    fetchStaticData();\n  }, []);\n  console.log(\"AquisATIC: \", staticData);\n\n  // Função para contar o número de eventos em cada array \n  const countEvents = dataArray => {\n    const eventCounts = {};\n    dataArray.forEach(events => {\n      events.forEach(event => {\n        const eventType = event.EventType;\n        if (eventType in eventCounts) {\n          eventCounts[eventType]++;\n        } else {\n          eventCounts[eventType] = 1;\n        }\n      });\n    });\n    return eventCounts;\n  };\n  const calculateEventDurations = dataArray => {\n    const eventDurations = {};\n    dataArray.forEach(eventsArray => {\n      eventsArray.forEach(event => {\n        const eventType = event.EventType;\n        const startTimestamp = new Date(event.Start);\n        const endTimestamp = new Date(event.End);\n        const duration = endTimestamp - startTimestamp;\n        if (eventType in eventDurations) {\n          eventDurations[eventType].push(duration);\n        } else {\n          eventDurations[eventType] = [duration];\n        }\n      });\n    });\n    return eventDurations;\n  };\n  const convertDataForScatterPlot = time => {\n    const convertedData = [];\n    for (const eventType in time) {\n      const durations = time[eventType];\n      const averageDuration = durations.reduce((acc, curr) => acc + curr, 0) / durations.length;\n\n      // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n      const xCoordinate = eventType;\n\n      // Usar a média das durações como coordenada y\n      const yCoordinate = averageDuration;\n\n      // Adicionar o ponto ao array convertido\n      convertedData.push({\n        x: xCoordinate,\n        y: yCoordinate\n      });\n    }\n    return convertedData;\n  };\n  const eventDataCounts = countEvents(staticData);\n  const eventDurations = calculateEventDurations(staticData);\n  const scatterPlotData = convertDataForScatterPlot(eventDurations);\n  const eventOnlineDataCounts = countEvents(onlineData);\n  const eventOnlineDurations = calculateEventDurations(onlineData);\n  const scatterOnlinePlotData = convertDataForScatterPlot(eventOnlineDurations);\n  const eventDataForChart = Object.entries(eventDataCounts).map(([eventType, count]) => ({\n    name: eventType,\n    value: count\n  }));\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        data: eventDataForChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Scatter Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ScatterPlot, {\n        data: scatterPlotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        data: eventDataForChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Scatter Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ScatterPlot, {\n        data: scatterPlotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"I9Na3+5AY62mFdXOlCQvdrdDQIs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchStaticDataFromAPI","socketIOClient","BarChart","ScatterPlot","jsxDEV","_jsxDEV","App","_s2","_s","$RefreshSig$","staticData","setStaticData","onlineData","setOnlineData","ENDPOINT","KafkaDataReceiver","socket","on","console","log","data","disconnect","fetchStaticData","fetchedStaticData","error","countEvents","dataArray","eventCounts","forEach","events","event","eventType","EventType","calculateEventDurations","eventDurations","eventsArray","startTimestamp","Date","Start","endTimestamp","End","duration","push","convertDataForScatterPlot","time","convertedData","durations","averageDuration","reduce","acc","curr","length","xCoordinate","yCoordinate","x","y","eventDataCounts","scatterPlotData","eventOnlineDataCounts","eventOnlineDurations","scatterOnlinePlotData","eventDataForChart","Object","entries","map","count","name","value","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport fetchStaticDataFromAPI from './api/StaticData';\nimport socketIOClient from 'socket.io-client';\nimport './App.css';\nimport BarChart from './components/charts/staticData/BarChart';\nimport ScatterPlot from './components/charts/staticData/ScatterPlot';\n\nfunction App() {\n  const [staticData, setStaticData] = useState([]);\n  const [onlineData, setOnlineData] = useState([]);\n\n  const ENDPOINT = 'http://localhost:8000'; // Endereço do servidor Flask-SocketIO\n\n  const KafkaDataReceiver = () => {\n    useEffect(() => {\n      const socket = socketIOClient(ENDPOINT);\n      socket.on('connect', () => {\n        console.log('Connected to server');\n      });\n      socket.on('data_response', (data) => {\n        console.log('Received data:', data);\n      });\n      socket.on('disconnect', () => {\n        console.log('Disconnected from server');\n      });\n\n      return () => {\n        socket.disconnect();\n      };\n    }, []);\n  }\n\n  console.log(\"Aqui: \", KafkaDataReceiver)\n  useEffect(() => {\n    const fetchStaticData = async () => {\n      try {\n        const fetchedStaticData = await fetchStaticDataFromAPI();\n        setStaticData(fetchedStaticData);\n      } catch (error) {\n        console.error('Error fetching Static Data:', error);\n      }\n    };\n\n    fetchStaticData();\n  }, []);\n\n  console.log(\"AquisATIC: \", staticData)\n  \n\n  // Função para contar o número de eventos em cada array \n  const countEvents = (dataArray) => {\n    const eventCounts = {};\n\n    dataArray.forEach((events) => {\n      events.forEach((event) => {\n        const eventType = event.EventType;\n        if (eventType in eventCounts) {\n          eventCounts[eventType]++;\n        } else {\n          eventCounts[eventType] = 1;\n        }\n      });\n    });\n\n    return eventCounts;\n  };\n\n  const calculateEventDurations = (dataArray) => {\n    const eventDurations = {};\n  \n    dataArray.forEach((eventsArray) => {\n      eventsArray.forEach((event) => {\n        const eventType = event.EventType;\n        const startTimestamp = new Date(event.Start);\n        const endTimestamp = new Date(event.End);\n        const duration = endTimestamp - startTimestamp;\n  \n        if (eventType in eventDurations) {\n          eventDurations[eventType].push(duration);\n        } else {\n          eventDurations[eventType] = [duration];\n        }\n      });\n    });\n\n    return eventDurations;\n  };\n\n  const convertDataForScatterPlot = (time) => {\n    const convertedData = [];\n    \n    for (const eventType in time) {\n      const durations = time[eventType];\n      const averageDuration = durations.reduce((acc, curr) => acc + curr, 0) / durations.length;\n      \n      // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n      const xCoordinate = eventType;\n      \n      // Usar a média das durações como coordenada y\n      const yCoordinate = averageDuration;\n      \n      // Adicionar o ponto ao array convertido\n      convertedData.push({ x: xCoordinate, y: yCoordinate });\n    }\n    \n    return convertedData;\n  };\n  \n  const eventDataCounts = countEvents(staticData);\n  const eventDurations = calculateEventDurations(staticData);\n  const scatterPlotData = convertDataForScatterPlot(eventDurations);\n\n  const eventOnlineDataCounts = countEvents(onlineData);\n  const eventOnlineDurations = calculateEventDurations(onlineData);\n  const scatterOnlinePlotData = convertDataForScatterPlot(eventOnlineDurations);\n\n  const eventDataForChart = Object.entries(eventDataCounts).map(([eventType, count]) => ({\n    name: eventType,\n    value: count,\n  }));\n\n  return (\n    <React.Fragment>\n      <div>\n      <h1>Bar Chart</h1>\n      <BarChart data={eventDataForChart} />\n    </div>\n    <div>\n      <h1>Scatter Plot</h1>\n      <ScatterPlot data={scatterPlotData} />\n    </div>\n    <h1>Real Time</h1>\n    <div>\n      <h1>Bar Chart</h1>\n      <BarChart data={eventDataForChart} />\n    </div>\n    <div>\n      <h1>Scatter Plot</h1>\n      <ScatterPlot data={scatterPlotData} />\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}