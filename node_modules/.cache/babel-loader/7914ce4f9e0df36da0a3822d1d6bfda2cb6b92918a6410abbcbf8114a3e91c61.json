{"ast":null,"code":"const CountRealTimeEvents = (receivedData, currentEventCounts) => {\n  // Verifica se currentEventCounts é um array; se não for, inicializa como um array vazio\n  if (!Array.isArray(currentEventCounts)) {\n    currentEventCounts = [];\n  }\n\n  // Verifica se os dados recebidos são um objeto\n  if (typeof receivedData === 'object' && receivedData.data) {\n    const event = JSON.parse(receivedData.data); // Converte a string JSON para objeto JavaScript\n    const eventType = event.EventType;\n\n    // Verifica se o tipo de evento já existe no contador atual\n    const index = currentEventCounts.findIndex(item => item.name === eventType);\n    if (index !== -1) {\n      // Se o tipo de evento já existir, incrementa o contador do evento\n      currentEventCounts[index].value++;\n    } else {\n      // Se o tipo de evento ainda não existir, adiciona um novo objeto ao array com contador 1\n      currentEventCounts.push({\n        name: eventType,\n        value: 1\n      });\n    }\n  }\n  console.log(\"Evento:\", currentEventCounts);\n  return currentEventCounts;\n};\n_c = CountRealTimeEvents;\nexport default CountRealTimeEvents;\nvar _c;\n$RefreshReg$(_c, \"CountRealTimeEvents\");","map":{"version":3,"names":["CountRealTimeEvents","receivedData","currentEventCounts","Array","isArray","data","event","JSON","parse","eventType","EventType","index","findIndex","item","name","value","push","console","log","_c","$RefreshReg$"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/realTimeData/CountRealTimeEvents.js"],"sourcesContent":["const CountRealTimeEvents = (receivedData, currentEventCounts) => {\n  // Verifica se currentEventCounts é um array; se não for, inicializa como um array vazio\n  if (!Array.isArray(currentEventCounts)) {\n    currentEventCounts = [];\n  }\n\n  // Verifica se os dados recebidos são um objeto\n  if (typeof receivedData === 'object' && receivedData.data) {\n    const event = JSON.parse(receivedData.data); // Converte a string JSON para objeto JavaScript\n    const eventType = event.EventType;\n\n    // Verifica se o tipo de evento já existe no contador atual\n    const index = currentEventCounts.findIndex(item => item.name === eventType);\n    if (index !== -1) {\n      // Se o tipo de evento já existir, incrementa o contador do evento\n      currentEventCounts[index].value++;\n    } else {\n      // Se o tipo de evento ainda não existir, adiciona um novo objeto ao array com contador 1\n      currentEventCounts.push({ name: eventType, value: 1 });\n    }\n  }\n  console.log(\"Evento:\", currentEventCounts);\n  return currentEventCounts;\n};\n\nexport default CountRealTimeEvents;\n"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGA,CAACC,YAAY,EAAEC,kBAAkB,KAAK;EAChE;EACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,kBAAkB,CAAC,EAAE;IACtCA,kBAAkB,GAAG,EAAE;EACzB;;EAEA;EACA,IAAI,OAAOD,YAAY,KAAK,QAAQ,IAAIA,YAAY,CAACI,IAAI,EAAE;IACzD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACP,YAAY,CAACI,IAAI,CAAC,CAAC,CAAC;IAC7C,MAAMI,SAAS,GAAGH,KAAK,CAACI,SAAS;;IAEjC;IACA,MAAMC,KAAK,GAAGT,kBAAkB,CAACU,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKL,SAAS,CAAC;IAC3E,IAAIE,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB;MACAT,kBAAkB,CAACS,KAAK,CAAC,CAACI,KAAK,EAAE;IACnC,CAAC,MAAM;MACL;MACAb,kBAAkB,CAACc,IAAI,CAAC;QAAEF,IAAI,EAAEL,SAAS;QAAEM,KAAK,EAAE;MAAE,CAAC,CAAC;IACxD;EACF;EACAE,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEhB,kBAAkB,CAAC;EAC1C,OAAOA,kBAAkB;AAC3B,CAAC;AAACiB,EAAA,GAvBInB,mBAAmB;AAyBzB,eAAeA,mBAAmB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}