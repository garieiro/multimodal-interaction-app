{"ast":null,"code":"var _jsxFileName = \"/Users/goncaloarieiro/thesis/multimodal-interaction/src/components/buildCharts/timeLineChart/StaticTimeLine.js\",\n  _s = $RefreshSig$();\nimport TimelineChart from '../../charts/TimeLineChart';\nimport React, { useEffect, useState } from 'react';\nimport { fetchStaticTimeLineFromAPI } from '../../../api/StaticData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StaticTimeLine = ({\n  onDataReceived,\n  onWordDataReceived,\n  data,\n  onEventTypeColor,\n  onExpDataReceived\n}) => {\n  _s();\n  const [timesData, setTimesData] = useState([]);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  useEffect(() => {\n    const fetchTimeLine = async () => {\n      try {\n        let fetchTimeLineData = [];\n        if (data) {\n          fetchTimeLineData = data;\n        } else {\n          fetchTimeLineData = await fetchStaticTimeLineFromAPI();\n        }\n        setTimesData(fetchTimeLineData);\n        setDataLoaded(true);\n      } catch (error) {\n        console.error('Error fetching TimeLine data:', error);\n      }\n    };\n    fetchTimeLine().catch(error => console.error('Error fetching TimeLine data:', error));\n  }, [data, onEventTypeColor]);\n  const handleLabelClick = async label => {\n    const experienceIdMatch = label.match(/\\d+/);\n    const experienceId = experienceIdMatch ? experienceIdMatch[0] : null;\n    if (experienceId) {\n      const fetchedData = await fetchStaticTimeLineFromAPI(experienceId);\n      console.log('Aqui', fetchedData);\n      setTimesData(fetchedData);\n      setDataLoaded(true);\n    } else {\n      console.error('Erro: Não foi possível extrair o ID da experiência da label:', label);\n    }\n  };\n  return dataLoaded && /*#__PURE__*/_jsxDEV(TimelineChart, {\n    data: timesData,\n    eventColor: onEventTypeColor,\n    handleLabelClick: handleLabelClick,\n    onDataReceived: onDataReceived,\n    onExpDataReceived: onExpDataReceived,\n    onWordDataReceived: onWordDataReceived\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n};\n_s(StaticTimeLine, \"Pl5eitySSsBONblILM6wwDJmq58=\");\n_c = StaticTimeLine;\nexport default StaticTimeLine;\nvar _c;\n$RefreshReg$(_c, \"StaticTimeLine\");","map":{"version":3,"names":["TimelineChart","React","useEffect","useState","fetchStaticTimeLineFromAPI","jsxDEV","_jsxDEV","StaticTimeLine","onDataReceived","onWordDataReceived","data","onEventTypeColor","onExpDataReceived","_s","timesData","setTimesData","dataLoaded","setDataLoaded","fetchTimeLine","fetchTimeLineData","error","console","catch","handleLabelClick","label","experienceIdMatch","match","experienceId","fetchedData","log","eventColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction/src/components/buildCharts/timeLineChart/StaticTimeLine.js"],"sourcesContent":["import TimelineChart from '../../charts/TimeLineChart'\nimport React, { useEffect, useState } from 'react'\nimport { fetchStaticTimeLineFromAPI } from '../../../api/StaticData'\n\nconst StaticTimeLine = ({\n  onDataReceived,\n  onWordDataReceived,\n  data,\n  onEventTypeColor,\n  onExpDataReceived,\n}) => {\n  const [timesData, setTimesData] = useState([])\n  const [dataLoaded, setDataLoaded] = useState(false)\n\n  useEffect(() => {\n    const fetchTimeLine = async () => {\n      try {\n        let fetchTimeLineData = []\n        if (data) {\n          fetchTimeLineData = data\n        } else {\n          fetchTimeLineData = await fetchStaticTimeLineFromAPI()\n        }\n        setTimesData(fetchTimeLineData)\n        setDataLoaded(true)\n      } catch (error) {\n        console.error('Error fetching TimeLine data:', error)\n      }\n    }\n\n    fetchTimeLine().catch((error) =>\n      console.error('Error fetching TimeLine data:', error)\n    )\n  }, [data, onEventTypeColor])\n\n  const handleLabelClick = async (label) => {\n    const experienceIdMatch = label.match(/\\d+/)\n    const experienceId = experienceIdMatch ? experienceIdMatch[0] : null\n\n    if (experienceId) {\n      const fetchedData = await fetchStaticTimeLineFromAPI(experienceId)\n      console.log('Aqui', fetchedData)\n      setTimesData(fetchedData)\n      setDataLoaded(true)\n    } else {\n      console.error(\n        'Erro: Não foi possível extrair o ID da experiência da label:',\n        label\n      )\n    }\n  }\n\n  return (\n    dataLoaded && (\n      <TimelineChart\n        data={timesData}\n        eventColor={onEventTypeColor}\n        handleLabelClick={handleLabelClick}\n        onDataReceived={onDataReceived}\n        onExpDataReceived={onExpDataReceived}\n        onWordDataReceived={onWordDataReceived}\n      />\n    )\n  )\n}\n\nexport default StaticTimeLine\n"],"mappings":";;AAAA,OAAOA,aAAa,MAAM,4BAA4B;AACtD,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,0BAA0B,QAAQ,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpE,MAAMC,cAAc,GAAGA,CAAC;EACtBC,cAAc;EACdC,kBAAkB;EAClBC,IAAI;EACJC,gBAAgB;EAChBC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,IAAIC,iBAAiB,GAAG,EAAE;QAC1B,IAAIT,IAAI,EAAE;UACRS,iBAAiB,GAAGT,IAAI;QAC1B,CAAC,MAAM;UACLS,iBAAiB,GAAG,MAAMf,0BAA0B,CAAC,CAAC;QACxD;QACAW,YAAY,CAACI,iBAAiB,CAAC;QAC/BF,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDF,aAAa,CAAC,CAAC,CAACI,KAAK,CAAEF,KAAK,IAC1BC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CACtD,CAAC;EACH,CAAC,EAAE,CAACV,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EAE5B,MAAMY,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACxC,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,KAAK,CAAC,KAAK,CAAC;IAC5C,MAAMC,YAAY,GAAGF,iBAAiB,GAAGA,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI;IAEpE,IAAIE,YAAY,EAAE;MAChB,MAAMC,WAAW,GAAG,MAAMxB,0BAA0B,CAACuB,YAAY,CAAC;MAClEN,OAAO,CAACQ,GAAG,CAAC,MAAM,EAAED,WAAW,CAAC;MAChCb,YAAY,CAACa,WAAW,CAAC;MACzBX,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACLI,OAAO,CAACD,KAAK,CACX,8DAA8D,EAC9DI,KACF,CAAC;IACH;EACF,CAAC;EAED,OACER,UAAU,iBACRV,OAAA,CAACN,aAAa;IACZU,IAAI,EAAEI,SAAU;IAChBgB,UAAU,EAAEnB,gBAAiB;IAC7BY,gBAAgB,EAAEA,gBAAiB;IACnCf,cAAc,EAAEA,cAAe;IAC/BI,iBAAiB,EAAEA,iBAAkB;IACrCH,kBAAkB,EAAEA;EAAmB;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CACF;AAEL,CAAC;AAAArB,EAAA,CA5DKN,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AA8DpB,eAAeA,cAAc;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}