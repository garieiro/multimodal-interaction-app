{"ast":null,"code":"// Endpoints já verificados\n\nexport const fetchStaticAllFilesFromAPI = async dataset => {\n  try {\n    const url = dataset ? `http://127.0.0.1:5000/files?dataset=${dataset}` : 'http://127.0.0.1:5000/files';\n    const response = await fetch(url);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching All files', error);\n    throw error;\n  }\n};\nexport const fetchStaticFilteredDataFromAPI = async (dataset, users) => {\n  try {\n    const response = await fetch(`http://127.0.0.1:5000/submit?dataset=${dataset}&users=${users}`);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Filtered data:', error);\n  }\n};\n\n// Fim da lista\nexport const fetchAllStaticDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching All Data:', error);\n  }\n};\nexport const fetchStaticTypesDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/types');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching All Types:', error);\n  }\n};\nexport const fetchStaticAllExperiencesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/total');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Types Count:', error);\n  }\n};\nexport const fetchStaticEventTypesDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/eventTypes');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching All Event Types:', error);\n  }\n};\nexport const fetchSunBurstFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/exps');\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to fetch sunburst data:', error);\n    throw error;\n  }\n};\nexport const fetchBoxPlotFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/expDurations');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Box Plot:', error);\n  }\n};\nexport const fetchStaticCountWordsFromAPI = async expIndex => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/words');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching words:', error);\n    throw error;\n  }\n};\nexport const fetchStaticSankeyFromAPI = async expIndex => {\n  try {\n    const url = expIndex !== undefined ? `http://127.0.0.1:5000/events/sankey?exp=${expIndex}` : 'http://127.0.0.1:5000/events/sankey';\n    const response = await fetch(url);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching sankey Data:', error);\n    throw error;\n  }\n};\nexport const fetchCountForAllTypesFromAPI = async () => {\n  try {\n    const types = await fetchStaticTypesDataFromAPI();\n    const countByType = [];\n    await Promise.all(types.map(async type => {\n      const response = await fetch(`http://127.0.0.1:5000/events/count?type=${type}`);\n      const countData = await response.json();\n      const count = countData[type];\n      countByType.push({\n        type,\n        count\n      });\n    }));\n    return countByType;\n  } catch (error) {\n    console.error('Error fetching Count for All Types:', error);\n    return null;\n  }\n};\nexport const fetchCountForAllEventTypesFromAPI = async () => {\n  try {\n    const eventTypes = await fetchStaticEventTypesDataFromAPI();\n    const countByEventType = [];\n    await Promise.all(eventTypes.map(async type => {\n      const response = await fetch(`http://127.0.0.1:5000/events/count?eventType=${type}`);\n      const countData = await response.json();\n      const count = countData[type];\n      countByEventType.push({\n        type,\n        count\n      });\n    }));\n    return countByEventType;\n  } catch (error) {\n    console.error('Error fetching Count for All Events Types:', error);\n    return null;\n  }\n};\nexport const fetchStaticCountExpsFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/expCount');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error);\n  }\n};\nexport const fetchStaticPiesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/pie-chart');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error);\n  }\n};\nexport const fetchStaticPies2FromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/type-semantic');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error);\n  }\n};\nexport const fetchStaticTimeLineFromAPI = async (experienceId = null) => {\n  try {\n    const url = experienceId ? `http://127.0.0.1:5000/events/times?exp_id=${experienceId}` : 'http://127.0.0.1:5000/events/times';\n    const response = await fetch(url);\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error);\n  }\n};","map":{"version":3,"names":["fetchStaticAllFilesFromAPI","dataset","url","response","fetch","json","error","console","fetchStaticFilteredDataFromAPI","users","fetchAllStaticDataFromAPI","fetchStaticTypesDataFromAPI","fetchStaticAllExperiencesFromAPI","fetchStaticEventTypesDataFromAPI","fetchSunBurstFromAPI","fetchBoxPlotFromAPI","fetchStaticCountWordsFromAPI","expIndex","fetchStaticSankeyFromAPI","undefined","fetchCountForAllTypesFromAPI","types","countByType","Promise","all","map","type","countData","count","push","fetchCountForAllEventTypesFromAPI","eventTypes","countByEventType","fetchStaticCountExpsFromAPI","fetchStaticPiesFromAPI","fetchStaticPies2FromAPI","fetchStaticTimeLineFromAPI","experienceId"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/api/StaticData.js"],"sourcesContent":["// Endpoints já verificados\n\nexport const fetchStaticAllFilesFromAPI = async (dataset) => {\n  try {\n    const url = dataset\n      ? `http://127.0.0.1:5000/files?dataset=${dataset}`\n      : 'http://127.0.0.1:5000/files'\n    const response = await fetch(url)\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching All files', error)\n    throw error\n  }\n}\n\nexport const fetchStaticFilteredDataFromAPI = async (dataset, users) => {\n  try {\n    const response = await fetch(\n      `http://127.0.0.1:5000/submit?dataset=${dataset}&users=${users}`\n    )\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Filtered data:', error)\n  }\n}\n\n// Fim da lista\nexport const fetchAllStaticDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching All Data:', error)\n  }\n}\n\nexport const fetchStaticTypesDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/types')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching All Types:', error)\n  }\n}\n\nexport const fetchStaticAllExperiencesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/total')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Types Count:', error)\n  }\n}\n\nexport const fetchStaticEventTypesDataFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/eventTypes')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching All Event Types:', error)\n  }\n}\n\nexport const fetchSunBurstFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/exps')\n    return await response.json()\n  } catch (error) {\n    console.error('Failed to fetch sunburst data:', error)\n    throw error\n  }\n}\n\nexport const fetchBoxPlotFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/expDurations')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Box Plot:', error)\n  }\n}\n\nexport const fetchStaticCountWordsFromAPI = async (expIndex) => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/words')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching words:', error)\n    throw error\n  }\n}\n\nexport const fetchStaticSankeyFromAPI = async (expIndex) => {\n  try {\n    const url =\n      expIndex !== undefined\n        ? `http://127.0.0.1:5000/events/sankey?exp=${expIndex}`\n        : 'http://127.0.0.1:5000/events/sankey'\n\n    const response = await fetch(url)\n\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching sankey Data:', error)\n    throw error\n  }\n}\n\nexport const fetchCountForAllTypesFromAPI = async () => {\n  try {\n    const types = await fetchStaticTypesDataFromAPI()\n\n    const countByType = []\n\n    await Promise.all(\n      types.map(async (type) => {\n        const response = await fetch(\n          `http://127.0.0.1:5000/events/count?type=${type}`\n        )\n        const countData = await response.json()\n        const count = countData[type]\n\n        countByType.push({ type, count })\n      })\n    )\n\n    return countByType\n  } catch (error) {\n    console.error('Error fetching Count for All Types:', error)\n    return null\n  }\n}\n\nexport const fetchCountForAllEventTypesFromAPI = async () => {\n  try {\n    const eventTypes = await fetchStaticEventTypesDataFromAPI()\n\n    const countByEventType = []\n\n    await Promise.all(\n      eventTypes.map(async (type) => {\n        const response = await fetch(\n          `http://127.0.0.1:5000/events/count?eventType=${type}`\n        )\n        const countData = await response.json()\n        const count = countData[type]\n\n        countByEventType.push({ type, count })\n      })\n    )\n\n    return countByEventType\n  } catch (error) {\n    console.error('Error fetching Count for All Events Types:', error)\n    return null\n  }\n}\n\nexport const fetchStaticCountExpsFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/expCount')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error)\n  }\n}\n\nexport const fetchStaticPiesFromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/pie-chart')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error)\n  }\n}\n\nexport const fetchStaticPies2FromAPI = async () => {\n  try {\n    const response = await fetch('http://127.0.0.1:5000/events/type-semantic')\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error)\n  }\n}\n\nexport const fetchStaticTimeLineFromAPI = async (experienceId = null) => {\n  try {\n    const url = experienceId\n      ? `http://127.0.0.1:5000/events/times?exp_id=${experienceId}`\n      : 'http://127.0.0.1:5000/events/times'\n\n    const response = await fetch(url)\n    return await response.json()\n  } catch (error) {\n    console.error('Error fetching Count Experiences:', error)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}