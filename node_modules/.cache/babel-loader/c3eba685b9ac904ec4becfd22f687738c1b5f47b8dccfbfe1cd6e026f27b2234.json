{"ast":null,"code":"const transformDataToSankeyChart = data => {\n  const nodesSet = new Set(); // Usamos um Set para evitar duplicatas\n  const formattedLinks = [];\n\n  // Iterar sobre cada \"experiência\" no conjunto de dados\n  for (const experienceKey in data) {\n    const experience = data[experienceKey];\n    for (const entry of experience) {\n      const source = entry.Source;\n      const target = entry.Target;\n      const duration = calculateDuration(entry.Start, entry.End); // Função para calcular a duração\n\n      // Adiciona os nós ao conjunto\n      nodesSet.add(source);\n      nodesSet.add(target);\n\n      // Formata os links\n      formattedLinks.push({\n        source: source,\n        target: target,\n        value: duration\n      });\n    }\n  }\n\n  // Converter o Set de nós para um array e mapear cada nó para o formato esperado\n  const nodesArray = Array.from(nodesSet).map(name => {\n    // Aqui definimos a categoria com base no nome do nó\n    const category = name.includes('MODALITY') ? 'INPUT' : 'OUTPUT'; // Defina a lógica conforme necessário\n    return {\n      name,\n      category\n    };\n  });\n\n  // Criar um índice de nós para que possamos mapear os índices corretamente nos links\n  const nodesIndex = Object.fromEntries(nodesArray.map((node, index) => [node.name, index]));\n\n  // Ajustar os links para usar os índices corretos\n  const adjustedLinks = formattedLinks.map(link => ({\n    source: nodesIndex[link.source],\n    target: nodesIndex[link.target],\n    value: link.value\n  }));\n  return {\n    nodes: nodesArray,\n    links: adjustedLinks\n  };\n};\nexport default transformDataToSankeyChart;","map":{"version":3,"names":["transformDataToSankeyChart","data","nodesSet","Set","formattedLinks","experienceKey","experience","entry","source","Source","target","Target","duration","calculateDuration","Start","End","add","push","value","nodesArray","Array","from","map","name","category","includes","nodesIndex","Object","fromEntries","node","index","adjustedLinks","link","nodes","links"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/src/components/charts/SankeyChart.js"],"sourcesContent":["const transformDataToSankeyChart = (data) => {\n  const nodesSet = new Set() // Usamos um Set para evitar duplicatas\n  const formattedLinks = []\n\n  // Iterar sobre cada \"experiência\" no conjunto de dados\n  for (const experienceKey in data) {\n    const experience = data[experienceKey]\n\n    for (const entry of experience) {\n      const source = entry.Source\n      const target = entry.Target\n      const duration = calculateDuration(entry.Start, entry.End) // Função para calcular a duração\n\n      // Adiciona os nós ao conjunto\n      nodesSet.add(source)\n      nodesSet.add(target)\n\n      // Formata os links\n      formattedLinks.push({\n        source: source,\n        target: target,\n        value: duration,\n      })\n    }\n  }\n\n  // Converter o Set de nós para um array e mapear cada nó para o formato esperado\n  const nodesArray = Array.from(nodesSet).map((name) => {\n    // Aqui definimos a categoria com base no nome do nó\n    const category = name.includes('MODALITY') ? 'INPUT' : 'OUTPUT' // Defina a lógica conforme necessário\n    return { name, category }\n  })\n\n  // Criar um índice de nós para que possamos mapear os índices corretamente nos links\n  const nodesIndex = Object.fromEntries(\n    nodesArray.map((node, index) => [node.name, index])\n  )\n\n  // Ajustar os links para usar os índices corretos\n  const adjustedLinks = formattedLinks.map((link) => ({\n    source: nodesIndex[link.source],\n    target: nodesIndex[link.target],\n    value: link.value,\n  }))\n\n  return {\n    nodes: nodesArray,\n    links: adjustedLinks,\n  }\n}\n\nexport default transformDataToSankeyChart\n"],"mappings":"AAAA,MAAMA,0BAA0B,GAAIC,IAAI,IAAK;EAC3C,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC,EAAC;EAC3B,MAAMC,cAAc,GAAG,EAAE;;EAEzB;EACA,KAAK,MAAMC,aAAa,IAAIJ,IAAI,EAAE;IAChC,MAAMK,UAAU,GAAGL,IAAI,CAACI,aAAa,CAAC;IAEtC,KAAK,MAAME,KAAK,IAAID,UAAU,EAAE;MAC9B,MAAME,MAAM,GAAGD,KAAK,CAACE,MAAM;MAC3B,MAAMC,MAAM,GAAGH,KAAK,CAACI,MAAM;MAC3B,MAAMC,QAAQ,GAAGC,iBAAiB,CAACN,KAAK,CAACO,KAAK,EAAEP,KAAK,CAACQ,GAAG,CAAC,EAAC;;MAE3D;MACAb,QAAQ,CAACc,GAAG,CAACR,MAAM,CAAC;MACpBN,QAAQ,CAACc,GAAG,CAACN,MAAM,CAAC;;MAEpB;MACAN,cAAc,CAACa,IAAI,CAAC;QAClBT,MAAM,EAAEA,MAAM;QACdE,MAAM,EAAEA,MAAM;QACdQ,KAAK,EAAEN;MACT,CAAC,CAAC;IACJ;EACF;;EAEA;EACA,MAAMO,UAAU,GAAGC,KAAK,CAACC,IAAI,CAACnB,QAAQ,CAAC,CAACoB,GAAG,CAAEC,IAAI,IAAK;IACpD;IACA,MAAMC,QAAQ,GAAGD,IAAI,CAACE,QAAQ,CAAC,UAAU,CAAC,GAAG,OAAO,GAAG,QAAQ,EAAC;IAChE,OAAO;MAAEF,IAAI;MAAEC;IAAS,CAAC;EAC3B,CAAC,CAAC;;EAEF;EACA,MAAME,UAAU,GAAGC,MAAM,CAACC,WAAW,CACnCT,UAAU,CAACG,GAAG,CAAC,CAACO,IAAI,EAAEC,KAAK,KAAK,CAACD,IAAI,CAACN,IAAI,EAAEO,KAAK,CAAC,CACpD,CAAC;;EAED;EACA,MAAMC,aAAa,GAAG3B,cAAc,CAACkB,GAAG,CAAEU,IAAI,KAAM;IAClDxB,MAAM,EAAEkB,UAAU,CAACM,IAAI,CAACxB,MAAM,CAAC;IAC/BE,MAAM,EAAEgB,UAAU,CAACM,IAAI,CAACtB,MAAM,CAAC;IAC/BQ,KAAK,EAAEc,IAAI,CAACd;EACd,CAAC,CAAC,CAAC;EAEH,OAAO;IACLe,KAAK,EAAEd,UAAU;IACjBe,KAAK,EAAEH;EACT,CAAC;AACH,CAAC;AAED,eAAe/B,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}