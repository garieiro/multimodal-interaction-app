{"ast":null,"code":"export const calculateEventDurations = dataArray => {\n  const eventDurations = {};\n  dataArray.forEach(eventsArray => {\n    eventsArray.forEach(event => {\n      const eventType = event.EventType;\n      const startTimestamp = new Date(event.Start);\n      const endTimestamp = new Date(event.End);\n      const duration = endTimestamp - startTimestamp;\n      if (eventType in eventDurations) {\n        eventDurations[eventType].push(duration);\n      } else {\n        eventDurations[eventType] = [duration];\n      }\n    });\n  });\n  return eventDurations;\n};\nexport const convertDataForScatterPlot = time => {\n  const convertedData = [];\n  for (const eventType in time) {\n    const durations = time[eventType];\n    const averageDuration = durations.reduce((acc, curr) => acc + curr, 0) / durations.length;\n\n    // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n    const xCoordinate = eventType;\n\n    // Usar a média das durações como coordenada y\n    const yCoordinate = averageDuration;\n\n    // Adicionar o ponto ao array convertido\n    convertedData.push({\n      x: xCoordinate,\n      y: yCoordinate\n    });\n  }\n  return convertedData;\n};","map":{"version":3,"names":["calculateEventDurations","dataArray","eventDurations","forEach","eventsArray","event","eventType","EventType","startTimestamp","Date","Start","endTimestamp","End","duration","push","convertDataForScatterPlot","time","convertedData","durations","averageDuration","reduce","acc","curr","length","xCoordinate","yCoordinate","x","y"],"sources":["/home/arieiro/Private/thesis/multimodalApp/multimodal-app/src/components/staticData/eventDuration.js"],"sourcesContent":["export const calculateEventDurations = (dataArray) => {\n  const eventDurations = {}\n\n  dataArray.forEach((eventsArray) => {\n    eventsArray.forEach((event) => {\n      const eventType = event.EventType\n      const startTimestamp = new Date(event.Start)\n      const endTimestamp = new Date(event.End)\n      const duration = endTimestamp - startTimestamp\n\n      if (eventType in eventDurations) {\n        eventDurations[eventType].push(duration)\n      } else {\n        eventDurations[eventType] = [duration]\n      }\n    })\n  })\n\n  return eventDurations\n}\n\nexport const convertDataForScatterPlot = (time) => {\n  const convertedData = [];\n  \n  for (const eventType in time) {\n    const durations = time[eventType];\n    const averageDuration = durations.reduce((acc, curr) => acc + curr, 0) / durations.length;\n    \n    // Atribuir a mesma coordenada x para todos os pontos de um tipo de evento\n    const xCoordinate = eventType;\n    \n    // Usar a média das durações como coordenada y\n    const yCoordinate = averageDuration;\n    \n    // Adicionar o ponto ao array convertido\n    convertedData.push({ x: xCoordinate, y: yCoordinate });\n  }\n  \n  return convertedData;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,uBAAuB,GAAIC,SAAS,IAAK;EACpD,MAAMC,cAAc,GAAG,CAAC,CAAC;EAEzBD,SAAS,CAACE,OAAO,CAAEC,WAAW,IAAK;IACjCA,WAAW,CAACD,OAAO,CAAEE,KAAK,IAAK;MAC7B,MAAMC,SAAS,GAAGD,KAAK,CAACE,SAAS;MACjC,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACJ,KAAK,CAACK,KAAK,CAAC;MAC5C,MAAMC,YAAY,GAAG,IAAIF,IAAI,CAACJ,KAAK,CAACO,GAAG,CAAC;MACxC,MAAMC,QAAQ,GAAGF,YAAY,GAAGH,cAAc;MAE9C,IAAIF,SAAS,IAAIJ,cAAc,EAAE;QAC/BA,cAAc,CAACI,SAAS,CAAC,CAACQ,IAAI,CAACD,QAAQ,CAAC;MAC1C,CAAC,MAAM;QACLX,cAAc,CAACI,SAAS,CAAC,GAAG,CAACO,QAAQ,CAAC;MACxC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOX,cAAc;AACvB,CAAC;AAED,OAAO,MAAMa,yBAAyB,GAAIC,IAAI,IAAK;EACjD,MAAMC,aAAa,GAAG,EAAE;EAExB,KAAK,MAAMX,SAAS,IAAIU,IAAI,EAAE;IAC5B,MAAME,SAAS,GAAGF,IAAI,CAACV,SAAS,CAAC;IACjC,MAAMa,eAAe,GAAGD,SAAS,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,EAAE,CAAC,CAAC,GAAGJ,SAAS,CAACK,MAAM;;IAEzF;IACA,MAAMC,WAAW,GAAGlB,SAAS;;IAE7B;IACA,MAAMmB,WAAW,GAAGN,eAAe;;IAEnC;IACAF,aAAa,CAACH,IAAI,CAAC;MAAEY,CAAC,EAAEF,WAAW;MAAEG,CAAC,EAAEF;IAAY,CAAC,CAAC;EACxD;EAEA,OAAOR,aAAa;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}