{"ast":null,"code":"'use strict';\n\nconst pragmaUtil = require('./pragma');\nconst variableUtil = require('./variable');\n\n/**\n * Check if variable is destructured from pragma import\n *\n * @param {Context} context eslint context\n * @param {ASTNode} node The AST node to check\n * @param {string} variable The variable name to check\n * @returns {boolean} True if createElement is destructured from the pragma\n */\nmodule.exports = function isDestructuredFromPragmaImport(context, node, variable) {\n  const pragma = pragmaUtil.getFromContext(context);\n  const variables = variableUtil.variablesInScope(context, node);\n  const variableInScope = variableUtil.getVariable(variables, variable);\n  if (variableInScope) {\n    const latestDef = variableUtil.getLatestVariableDefinition(variableInScope);\n    if (latestDef) {\n      // check if latest definition is a variable declaration: 'variable = value'\n      if (latestDef.node.type === 'VariableDeclarator' && latestDef.node.init) {\n        // check for: 'variable = pragma.variable'\n        if (latestDef.node.init.type === 'MemberExpression' && latestDef.node.init.object.type === 'Identifier' && latestDef.node.init.object.name === pragma) {\n          return true;\n        }\n        // check for: '{variable} = pragma'\n        if (latestDef.node.init.type === 'Identifier' && latestDef.node.init.name === pragma) {\n          return true;\n        }\n\n        // \"require('react')\"\n        let requireExpression = null;\n\n        // get \"require('react')\" from: \"{variable} = require('react')\"\n        if (latestDef.node.init.type === 'CallExpression') {\n          requireExpression = latestDef.node.init;\n        }\n        // get \"require('react')\" from: \"variable = require('react').variable\"\n        if (!requireExpression && latestDef.node.init.type === 'MemberExpression' && latestDef.node.init.object.type === 'CallExpression') {\n          requireExpression = latestDef.node.init.object;\n        }\n\n        // check proper require.\n        if (requireExpression && requireExpression.callee && requireExpression.callee.name === 'require' && requireExpression.arguments[0] && requireExpression.arguments[0].value === pragma.toLocaleLowerCase()) {\n          return true;\n        }\n        return false;\n      }\n\n      // latest definition is an import declaration: import {<variable>} from 'react'\n      if (latestDef.parent && latestDef.parent.type === 'ImportDeclaration' && latestDef.parent.source.value === pragma.toLocaleLowerCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};","map":{"version":3,"names":["pragmaUtil","require","variableUtil","module","exports","isDestructuredFromPragmaImport","context","node","variable","pragma","getFromContext","variables","variablesInScope","variableInScope","getVariable","latestDef","getLatestVariableDefinition","type","init","object","name","requireExpression","callee","arguments","value","toLocaleLowerCase","parent","source"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/node_modules/eslint-plugin-react/lib/util/isDestructuredFromPragmaImport.js"],"sourcesContent":["'use strict';\n\nconst pragmaUtil = require('./pragma');\nconst variableUtil = require('./variable');\n\n/**\n * Check if variable is destructured from pragma import\n *\n * @param {Context} context eslint context\n * @param {ASTNode} node The AST node to check\n * @param {string} variable The variable name to check\n * @returns {boolean} True if createElement is destructured from the pragma\n */\nmodule.exports = function isDestructuredFromPragmaImport(context, node, variable) {\n  const pragma = pragmaUtil.getFromContext(context);\n  const variables = variableUtil.variablesInScope(context, node);\n  const variableInScope = variableUtil.getVariable(variables, variable);\n  if (variableInScope) {\n    const latestDef = variableUtil.getLatestVariableDefinition(variableInScope);\n    if (latestDef) {\n      // check if latest definition is a variable declaration: 'variable = value'\n      if (latestDef.node.type === 'VariableDeclarator' && latestDef.node.init) {\n        // check for: 'variable = pragma.variable'\n        if (\n          latestDef.node.init.type === 'MemberExpression'\n              && latestDef.node.init.object.type === 'Identifier'\n              && latestDef.node.init.object.name === pragma\n        ) {\n          return true;\n        }\n        // check for: '{variable} = pragma'\n        if (\n          latestDef.node.init.type === 'Identifier'\n              && latestDef.node.init.name === pragma\n        ) {\n          return true;\n        }\n\n        // \"require('react')\"\n        let requireExpression = null;\n\n        // get \"require('react')\" from: \"{variable} = require('react')\"\n        if (latestDef.node.init.type === 'CallExpression') {\n          requireExpression = latestDef.node.init;\n        }\n        // get \"require('react')\" from: \"variable = require('react').variable\"\n        if (\n          !requireExpression\n              && latestDef.node.init.type === 'MemberExpression'\n              && latestDef.node.init.object.type === 'CallExpression'\n        ) {\n          requireExpression = latestDef.node.init.object;\n        }\n\n        // check proper require.\n        if (\n          requireExpression\n              && requireExpression.callee\n              && requireExpression.callee.name === 'require'\n              && requireExpression.arguments[0]\n              && requireExpression.arguments[0].value === pragma.toLocaleLowerCase()\n        ) {\n          return true;\n        }\n\n        return false;\n      }\n\n      // latest definition is an import declaration: import {<variable>} from 'react'\n      if (\n        latestDef.parent\n            && latestDef.parent.type === 'ImportDeclaration'\n            && latestDef.parent.source.value === pragma.toLocaleLowerCase()\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,UAAU,CAAC;AACtC,MAAMC,YAAY,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,SAASC,8BAA8BA,CAACC,OAAO,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EAChF,MAAMC,MAAM,GAAGT,UAAU,CAACU,cAAc,CAACJ,OAAO,CAAC;EACjD,MAAMK,SAAS,GAAGT,YAAY,CAACU,gBAAgB,CAACN,OAAO,EAAEC,IAAI,CAAC;EAC9D,MAAMM,eAAe,GAAGX,YAAY,CAACY,WAAW,CAACH,SAAS,EAAEH,QAAQ,CAAC;EACrE,IAAIK,eAAe,EAAE;IACnB,MAAME,SAAS,GAAGb,YAAY,CAACc,2BAA2B,CAACH,eAAe,CAAC;IAC3E,IAAIE,SAAS,EAAE;MACb;MACA,IAAIA,SAAS,CAACR,IAAI,CAACU,IAAI,KAAK,oBAAoB,IAAIF,SAAS,CAACR,IAAI,CAACW,IAAI,EAAE;QACvE;QACA,IACEH,SAAS,CAACR,IAAI,CAACW,IAAI,CAACD,IAAI,KAAK,kBAAkB,IACxCF,SAAS,CAACR,IAAI,CAACW,IAAI,CAACC,MAAM,CAACF,IAAI,KAAK,YAAY,IAChDF,SAAS,CAACR,IAAI,CAACW,IAAI,CAACC,MAAM,CAACC,IAAI,KAAKX,MAAM,EACjD;UACA,OAAO,IAAI;QACb;QACA;QACA,IACEM,SAAS,CAACR,IAAI,CAACW,IAAI,CAACD,IAAI,KAAK,YAAY,IAClCF,SAAS,CAACR,IAAI,CAACW,IAAI,CAACE,IAAI,KAAKX,MAAM,EAC1C;UACA,OAAO,IAAI;QACb;;QAEA;QACA,IAAIY,iBAAiB,GAAG,IAAI;;QAE5B;QACA,IAAIN,SAAS,CAACR,IAAI,CAACW,IAAI,CAACD,IAAI,KAAK,gBAAgB,EAAE;UACjDI,iBAAiB,GAAGN,SAAS,CAACR,IAAI,CAACW,IAAI;QACzC;QACA;QACA,IACE,CAACG,iBAAiB,IACXN,SAAS,CAACR,IAAI,CAACW,IAAI,CAACD,IAAI,KAAK,kBAAkB,IAC/CF,SAAS,CAACR,IAAI,CAACW,IAAI,CAACC,MAAM,CAACF,IAAI,KAAK,gBAAgB,EAC3D;UACAI,iBAAiB,GAAGN,SAAS,CAACR,IAAI,CAACW,IAAI,CAACC,MAAM;QAChD;;QAEA;QACA,IACEE,iBAAiB,IACVA,iBAAiB,CAACC,MAAM,IACxBD,iBAAiB,CAACC,MAAM,CAACF,IAAI,KAAK,SAAS,IAC3CC,iBAAiB,CAACE,SAAS,CAAC,CAAC,CAAC,IAC9BF,iBAAiB,CAACE,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,KAAKf,MAAM,CAACgB,iBAAiB,CAAC,CAAC,EAC1E;UACA,OAAO,IAAI;QACb;QAEA,OAAO,KAAK;MACd;;MAEA;MACA,IACEV,SAAS,CAACW,MAAM,IACTX,SAAS,CAACW,MAAM,CAACT,IAAI,KAAK,mBAAmB,IAC7CF,SAAS,CAACW,MAAM,CAACC,MAAM,CAACH,KAAK,KAAKf,MAAM,CAACgB,iBAAiB,CAAC,CAAC,EACnE;QACA,OAAO,IAAI;MACb;IACF;EACF;EACA,OAAO,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}