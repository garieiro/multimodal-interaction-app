{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPropValue;\nexports.getLiteralPropValue = getLiteralPropValue;\nvar _values = require('./values');\nvar _values2 = _interopRequireDefault(_values);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar extractValue = function extractValue(attribute, extractor) {\n  if (attribute && attribute.type === 'JSXAttribute') {\n    if (attribute.value === null) {\n      // Null valued attributes imply truthiness.\n      // For example: <div aria-hidden />\n      // See: https://facebook.github.io/react/docs/jsx-in-depth.html#boolean-attributes\n      return true;\n    }\n    return extractor(attribute.value);\n  }\n  return undefined;\n};\n\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return the most *closely* associated\n * value with the intention of the JSX.\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\nfunction getPropValue(attribute) {\n  return extractValue(attribute, _values2.default);\n}\n\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return a value only if we can extract\n * a literal value from its attribute (i.e. values that have generic\n * types in JavaScript - strings, numbers, booleans, etc.)\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\nfunction getLiteralPropValue(attribute) {\n  return extractValue(attribute, _values.getLiteralValue);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","getPropValue","getLiteralPropValue","_values","require","_values2","_interopRequireDefault","obj","__esModule","extractValue","attribute","extractor","type","undefined","getLiteralValue"],"sources":["/Users/goncaloarieiro/thesis/multimodal-interaction-app/node_modules/jsx-ast-utils/lib/getPropValue.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPropValue;\nexports.getLiteralPropValue = getLiteralPropValue;\n\nvar _values = require('./values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar extractValue = function extractValue(attribute, extractor) {\n  if (attribute && attribute.type === 'JSXAttribute') {\n    if (attribute.value === null) {\n      // Null valued attributes imply truthiness.\n      // For example: <div aria-hidden />\n      // See: https://facebook.github.io/react/docs/jsx-in-depth.html#boolean-attributes\n      return true;\n    }\n\n    return extractor(attribute.value);\n  }\n\n  return undefined;\n};\n\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return the most *closely* associated\n * value with the intention of the JSX.\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\nfunction getPropValue(attribute) {\n  return extractValue(attribute, _values2.default);\n}\n\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return a value only if we can extract\n * a literal value from its attribute (i.e. values that have generic\n * types in JavaScript - strings, numbers, booleans, etc.)\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\nfunction getLiteralPropValue(attribute) {\n  return extractValue(attribute, _values.getLiteralValue);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,YAAY;AAC9BH,OAAO,CAACI,mBAAmB,GAAGA,mBAAmB;AAEjD,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AAEjC,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAO,CAAC;AAE9C,SAASG,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEP,OAAO,EAAEO;EAAI,CAAC;AAAE;AAE9F,IAAIE,YAAY,GAAG,SAASA,YAAYA,CAACC,SAAS,EAAEC,SAAS,EAAE;EAC7D,IAAID,SAAS,IAAIA,SAAS,CAACE,IAAI,KAAK,cAAc,EAAE;IAClD,IAAIF,SAAS,CAACX,KAAK,KAAK,IAAI,EAAE;MAC5B;MACA;MACA;MACA,OAAO,IAAI;IACb;IAEA,OAAOY,SAAS,CAACD,SAAS,CAACX,KAAK,CAAC;EACnC;EAEA,OAAOc,SAAS;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASZ,YAAYA,CAACS,SAAS,EAAE;EAC/B,OAAOD,YAAY,CAACC,SAAS,EAAEL,QAAQ,CAACL,OAAO,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,mBAAmBA,CAACQ,SAAS,EAAE;EACtC,OAAOD,YAAY,CAACC,SAAS,EAAEP,OAAO,CAACW,eAAe,CAAC;AACzD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}